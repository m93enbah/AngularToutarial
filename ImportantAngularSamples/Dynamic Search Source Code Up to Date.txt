/************************************************ END DECLARE CAM_FORMS*******************************/                          
/*
 Database Structure Part
           
           //we have the following tables used as we know
           
  CREATE TABLE `bst_pages_parent` (
  `ID` bigint(20) NOT NULL,
  `PAGE_ID` bigint(20) NOT NULL,
  `SUB_PAGE_ID` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
  
  
  //This table is to apply inner pages between 2 tables
                                             
  CREATE TABLE `bst_pages` (
  `ID` bigint(20) NOT NULL,
  `KEY` varchar(255) DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `NAME2` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `ORDER` int(11) NOT NULL DEFAULT '1',
  `PAGE_URL` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `NOTES` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `PAGE_ID` bigint(20) DEFAULT NULL,
  `MODULE_CODE` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `COMPANY_ID` bigint(20) NOT NULL,
  `CREATION_USER` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `CREATION_DATE` datetime DEFAULT NULL,
  `MODIFICATION_USER` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `MODIFICATION_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `bst_pages_idx01` (`MODULE_CODE`),
  KEY `bst_pages_fk01` (`MODULE_CODE`),
  CONSTRAINT `bst_pages_fk01` FOREIGN KEY (`MODULE_CODE`) REFERENCES `bst_modules` (`code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
  
//This table is contain the general property beside the PARAMS_TYPE = 1 (to indicate that there is parameter in the service URL)
 
 CREATE TABLE `bst_pages_controls` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `KEY` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `FORM` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `LABEL_KEY` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `ALLOW_EDIT_LABEL` tinyint(4) DEFAULT NULL,
  `ALLOW_REQUIRED` tinyint(4) DEFAULT NULL,
  `IS_REQUIRED` tinyint(4) DEFAULT NULL,
  `ALLOW_HIDDEN` tinyint(4) DEFAULT NULL,
  `IS_HIDDEN` tinyint(4) DEFAULT NULL,
  `ALLOW_DISABLED` tinyint(4) DEFAULT NULL,
  `IS_DISABLED` tinyint(4) DEFAULT NULL,
  `ORDER` bigint(4) DEFAULT NULL,
  `CONTROL_TYPE` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `TEXT_TYPE` varchar(255) DEFAULT NULL,
  `PARAMS_TYPE` bigint(2) DEFAULT NULL,
  `CLASS_NAME` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `SERVICE_URL` varchar(1024) DEFAULT NULL,
  `IS_DYNAMIC` tinyint(4) DEFAULT NULL,
  `FORM_TYPE` bigint(4) DEFAULT NULL,
  `PAGE_ID` bigint(20) NOT NULL,
  `CONTROL_ID` bigint(20) DEFAULT NULL,
  `CREATION_USER` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `CREATION_DATE` datetime NOT NULL,
  `MODIFICATION_USER` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `MODIFICATION_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `bst_pages_controls_fk01` (`PAGE_ID`),
  KEY `bst_pages_controls_fk02` (`CONTROL_ID`),
  CONSTRAINT `bst_pages_controls_fk01` FOREIGN KEY (`PAGE_ID`) REFERENCES `bst_pages` (`id`),
  CONSTRAINT `bst_pages_controls_fk02` FOREIGN KEY (`CONTROL_ID`) REFERENCES `bst_pages_controls` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=446 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
 
        
 Notes:-
 
 FORM                    represetn the form group name used on the search dialog 
 Key                     used with the key in the bst_resources table
 name                    represnet the form control name in the html page
 Control_ID              represnet the target parent it assign to it
 IS_Dynamic              IF value = 1 then the control map to service URL (always used with search control) , value = 0 then it used with textbox or search entry form
 Control_Type            dropdown , textbox , radiobutton, etc ....
 Text_Type               If the control is dropdown then value is null , instead set to the text

//This table contain the parameter type that assign control to   

  CREATE TABLE `bst_pages_controls_params` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(255) NOT NULL,
  `TYPE` bigint(4) NOT NULL,
  `DEPEND_ON_KEY` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `CONTROL_ID` bigint(20) NOT NULL,
  `CREATION_USER` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `CREATION_DATE` datetime NOT NULL,
  `MODIFICATION_USER` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `MODIFICATION_DATE` datetime DEFAULT NULL,
  `SYSTEM_ID` bigint(5) DEFAULT NULL,
  `IS_REQUIRED` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `bst_pages_controls_params_fk01` (`CONTROL_ID`),
  CONSTRAINT `bst_pages_controls_params_fk01` FOREIGN KEY (`CONTROL_ID`) REFERENCES `bst_pages_controls` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=91 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
  
  
  Notes:-
  
  Control_ID represnet the ID of control belong to it   (must be the same value on the bst_page_controls.Key column)
  Depend_ON_KEy represnet the key of the parent control if depened (if not put null value or empty)
  IS_REQUIRED to set the parameter on the service url as required or not
  
  
CREATE TABLE `bst_resources` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `object` varchar(256) NOT NULL,
  `name` varchar(255) NOT NULL,
  `value` varchar(1024) NOT NULL,
  `language` varchar(8) NOT NULL,
  `company_id` bigint(20) NOT NULL,
  `creation_user` varchar(80) NOT NULL,
  `creation_date` datetime DEFAULT NULL,
  `modification_user` varchar(80) DEFAULT NULL,
  `modification_date` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`,`object`,`name`,`language`,`company_id`)
) ENGINE=InnoDB AUTO_INCREMENT=396 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
  
  
 object : reperesnet the key on the bst_pages 
 name   : repersnet the control key that used on the html 
  
  
==========================================================================================         
Bst Pages Records
'8', 'CoverTypes', 'Cover Types', NULL, '1', 'CoverTypes', NULL, NULL, 'SBM', '1', 'Admin', '2019-07-09 00:00:00', NULL, NULL  
==========================================================================================    
Bst Pages Controls
                         
 '68', 'insuranceClass', 'coverTypesSearchForm', 'lblInsuranceClass', '1', '0', '0', '0', '0', '0', '0', '2', 'dropdown', NULL, '1', 'col-md-4 form-group', 'api/InsuranceClasses/GetAllClasses/{{CompanyId}}', '1', NULL, '8', NULL, 'Admin', '2019-07-09 00:00:00', NULL, NULL
'69', 'subLOB', 'coverTypesSearchForm', 'lblSubLineOfBusiness', '1', '1', '0', '1', '0', '1', '0', '3', 'dropdown', NULL, '1', 'col-md-4 form-group', 'api/BstPolicyTypes/GetByClassId/{{classId}}', '1', NULL, '8', '68', 'Admin', '2019-07-09 00:00:00', 'Admin', '2019-08-30 12:29:27'
'70', 'coverName', 'coverTypesSearchForm', 'lblCoverName', '1', '1', '0', '1', '0', '1', '0', '4', 'autoComplete', NULL, '1', 'col-md-4 form-group', 'api/BstCoverTypes/GetAllCoverTypes', '1', NULL, '8', NULL, 'Admin', '2019-07-09 00:00:00', NULL, NULL
'71', 'insuranceCompany', 'coverTypesEntryForm', 'lblInsuranceCompany', '1', '0', '1', '0', '0', '0', '0', '1', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'72', 'insuranceClass', 'coverTypesEntryForm', 'lblInsuranceClass', '1', '0', '1', '0', '0', '0', '0', '2', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-09 00:00:00', NULL, NULL
'73', 'name', 'coverTypesEntryForm', 'lblName', '1', '0', '1', '0', '0', '0', '0', '3', 'textbox', 'text', NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-09 00:00:00', NULL, NULL
'74', 'name2', 'coverTypesEntryForm', 'lblName2', '1', '1', '0', '1', '0', '1', '0', '4', 'textbox', 'text', NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-09 00:00:00', 'Admin', '2019-07-18 12:51:04'
'75', 'parentCover', 'coverTypesEntryForm', 'lblParentCover', '1', '1', '0', '1', '0', '1', '0', '5', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-09 00:00:00', 'Admin', '2019-07-18 12:50:45'
'76', 'insuranceClass', 'policyPremiumEntryForm', 'lblInsuranceClass', '1', '0', '1', '0', '0', '0', '0', '1', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', 'Admin', '2019-07-11 00:00:00'
'77', 'subLOB', 'policyPremiumEntryForm', 'lblSubLineOfBusiness', '1', '0', '1', '0', '0', '0', '0', '2', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'78', 'rateFraction', 'policyPremiumEntryForm', 'lblRateFraction', '1', '0', '1', '0', '0', '0', '0', '3', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'79', 'minPremium', 'policyPremiumEntryForm', 'lblMinPremium', '1', '1', '0', '1', '0', '1', '0', '4', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', 'Admin', '2019-07-28 14:13:14'
'80', 'premiumRate', 'policyPremiumEntryForm', 'lblPremiumRate', '1', '0', '1', '0', '0', '0', '0', '5', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'81', 'premiumAmount', 'policyPremiumEntryForm', 'lblPremiumAmount', '1', '0', '1', '0', '0', '0', '0', '6', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'82', 'deductible', 'policyPremiumEntryForm', 'lblDeductible', '1', '1', '0', '1', '0', '1', '0', '7', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'83', 'maxDeductibleAmount', 'policyPremiumEntryForm', 'lblMaxDeductibleAmount', '1', '1', '0', '1', '0', '1', '0', '8', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'84', 'minDeductibleAmount', 'policyPremiumEntryForm', 'lblMinDeductibleAmount', '1', '1', '0', '1', '0', '1', '0', '9', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'85', 'sumInsuredFrom', 'policyPremiumEntryForm', 'lblSumInsuredFrom', '1', '1', '0', '1', '0', '1', '0', '10', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'86', 'sumInsuredTo', 'policyPremiumEntryForm', 'lblSumInsuredTo', '1', '1', '0', '1', '0', '1', '0', '11', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'87', 'vehicleType', 'policyPremiumEntryForm', 'lblVehicleType', '1', '1', '0', '1', '0', '1', '0', '12', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'88', 'vehicleModel', 'policyPremiumEntryForm', 'lblVehicleModel', '1', '1', '0', '1', '0', '1', '0', '13', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'89', 'vehicleBody', 'policyPremiumEntryForm', 'lblVehicleBody', '1', '1', '0', '1', '0', '1', '0', '14', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'90', 'repairCondition', 'policyPremiumEntryForm', 'lblRepairCondition', '1', '1', '0', '1', '0', '1', '0', '15', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'91', 'driverAgeFrom', 'policyPremiumEntryForm', 'lblDriverAgeFrom', '1', '1', '0', '1', '0', '1', '0', '16', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'92', 'driverAgeTo', 'policyPremiumEntryForm', 'lblDriverAgeTo', '1', '1', '0', '1', '0', '1', '0', '17', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'93', 'vehicleAgeFrom', 'policyPremiumEntryForm', 'lblVehicleAgeFrom', '1', '1', '0', '1', '0', '1', '0', '18', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'94', 'vehicleAgeTo', 'policyPremiumEntryForm', 'lblVehicleAgeTo', '1', '1', '0', '1', '0', '1', '0', '19', 'textbox', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'95', 'category', 'policyPremiumEntryForm', 'lblCategory', '1', '1', '0', '1', '0', '1', '0', '20', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'96', 'branch', 'policyPremiumEntryForm', 'lblBranch', '1', '1', '0', '1', '0', '1', '0', '21', 'dropdown', NULL, NULL, 'col-md-4 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'97', 'applyPremium', 'policyPremiumEntryForm', 'lblApplyPremium', '1', '1', '0', '1', '0', '1', '0', '22', 'checkbox', NULL, NULL, 'col-md-2 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'98', 'autoAdd', 'policyPremiumEntryForm', 'lblAutoAdd', '1', '1', '0', '1', '0', '1', '0', '23', 'checkbox', NULL, NULL, 'col-md-2 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'99', 'isActive', 'policyPremiumEntryForm', 'lblIsActive', '1', '1', '0', '1', '0', '1', '0', '24', 'checkbox', NULL, NULL, 'col-md-2 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'100', 'applyAgentCommission', 'policyPremiumEntryForm', 'lblApplyAgentCommission', '1', '1', '0', '1', '0', '1', '0', '25', 'checkbox', NULL, NULL, 'col-md-2 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL
'113', 'CommunicationBy', 'InsurancePartiesEntryform', 'CommunicationBy', '1', '1', '0', '1', '0', '1', '0', '23', 'checkbox', NULL, NULL, 'col-md-2 form-group', NULL, '0', NULL, '8', NULL, 'Admin', '2019-07-11 00:00:00', NULL, NULL

==========================================================================================  
Bst_pages_Controls_params  sample
 
'42', 'CompanyId', '3', NULL, '68', 'Admin', '2019-07-15 00:00:00', NULL, NULL, NULL, '0'
'41', 'classId', '1', 'insuranceClass', '69', 'Admin', '2019-07-09 00:00:00', NULL, NULL, NULL, '1'


by using ENUM

'53', 'domainId', '7', 'Domains/InsurersPartiesType', '39', 'Admin', '2019-07-29 00:00:00', NULL, NULL, '301', '0'
'54', 'companyId', '3', NULL, '39', 'Admin', '2019-07-29 00:00:00', NULL, NULL, NULL, '0'

by auto complete
'45', 'type', '2', 'policyHolderSearch', '143', 'Admin', '2019-07-09 00:00:00', NULL, NULL, NULL, '0'

==============================================================================================
bst_resources table record sample

'74', 'CoverTypes', 'lblApplyAgentCommission', 'Apply Agent Commission', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'75', 'CoverTypes', 'lblApplyPremium', 'Apply Premium', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'76', 'CoverTypes', 'lblAutoAdd', 'Auto Add', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'77', 'CoverTypes', 'lblBranch', 'Branch', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'78', 'CoverTypes', 'lblCategory', 'Category', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'79', 'CoverTypes', 'lblCoverName', 'Cover Name', '1', '1', 'Admin', '2019-07-09 00:00:00', NULL, NULL
'80', 'CoverTypes', 'lblDeductible', 'Deductible', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'81', 'CoverTypes', 'lblDriverAgeFrom', 'Driver Age From', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'82', 'CoverTypes', 'lblDriverAgeTo', 'Driver Age To', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'83', 'CoverTypes', 'lblInsuranceClass', 'Insurance Class', '1', '1', 'Admin', '2019-07-09 00:00:00', 'Admin', '2019-07-28 14:12:15'
'84', 'CoverTypes', 'lblInsuranceSystem', 'Insurance System', '1', '1', 'Admin', '2019-07-09 00:00:00', NULL, NULL
'85', 'CoverTypes', 'lblIsActive', 'Is Active', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'86', 'CoverTypes', 'lblMaxDeductibleAmount', 'Max Deductible Amount', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'87', 'CoverTypes', 'lblMinDeductibleAmount', 'Min Deductible Amount', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'88', 'CoverTypes', 'lblMinPremium', 'Min Premium', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'89', 'CoverTypes', 'lblName', 'Name', '1', '1', 'Admin', '2019-07-09 00:00:00', NULL, NULL
'90', 'CoverTypes', 'lblName2', 'Name2', '1', '1', 'Admin', '2019-07-09 00:00:00', NULL, NULL
'91', 'CoverTypes', 'lblParentCover', 'Parent Cover', '1', '1', 'Admin', '2019-07-09 00:00:00', NULL, NULL
'92', 'CoverTypes', 'lblPremiumAmount', 'Premium Amount', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'93', 'CoverTypes', 'lblPremiumRate', 'Premium Rate', '1', '1', 'Admin', '2019-07-11 00:00:00', 'Admin', '2019-07-24 08:47:07'
'94', 'CoverTypes', 'lblRateFraction', 'Rate Fraction', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'95', 'CoverTypes', 'lblRepairCondition', 'Repair Condition', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'96', 'CoverTypes', 'lblSubLineOfBusiness', 'Sub Line Of Business', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'97', 'CoverTypes', 'lblSumInsuredFrom', 'Sum Insured From', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'98', 'CoverTypes', 'lblSumInsuredTo', 'Sum Insured To', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'99', 'CoverTypes', 'lblVehicleAgeFrom', 'Vehicle Age From', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'100', 'CoverTypes', 'lblVehicleAgeTo', 'Vehicle Age To', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'101', 'CoverTypes', 'lblVehicleBody', 'Vehicle Body', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'102', 'CoverTypes', 'lblVehicleModel', 'Vehicle Model', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'103', 'CoverTypes', 'lblVehicleType', 'Vehicle Type', '1', '1', 'Admin', '2019-07-11 00:00:00', NULL, NULL
'395', 'CoverTypes', 'lblInsuranceClass', 'Insurance Class123asdasd', '0', '1', 'Admin', '2019-08-30 12:28:02', 'Admin', '2019-08-30 12:28:30'
 
  
===============================================================================================================
BackEnd Part 

//BstPagesControls API ()

using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Linq;
using System.Linq.Expressions;
using AngBMS.Domain.Interfaces.Services;
using AngBMS.Domain.Models;
using Domain.Interfaces.Shared;

namespace AngBMS.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BstPagesControlsController : ControllerBase
    {
        private readonly IServiceUnitOfWork _serviceUnitOfWork;

        public BstPagesControlsController(IServiceUnitOfWork serviceUnitOfWork)
        {
            _serviceUnitOfWork = serviceUnitOfWork;
        }

        [HttpGet("{id}/{companyId}")]
        public IResponseResult<BstPagesControls> Get(int id, int companyId)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstPagesControlsService.Value.Get(id, companyId);
        }

        [HttpGet]
        [Route("GetByPageKey/{key}/{moduleCode}/{companyId}")]
        public IResponseResult<IEnumerable<BstPagesControls>> GetByPageKey(string key, string moduleCode, int companyId)
        {
            using (_serviceUnitOfWork)

                return _serviceUnitOfWork.BstPagesControlsService.Value.GetByPageKey(key, moduleCode, companyId);
        }

        [HttpGet]
        [Route("GetAll")]
        public IResponseResult<IEnumerable<BstPagesControls>> GetAll(int companyId)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstPagesControlsService.Value.GetAll();
        }

        [HttpDelete("{id}")]
        public IResponseResult<BstPagesControls> Delete(int id)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstPagesControlsService.Value.Remove(new BstPagesControls() { Id = id });
        }

        [HttpPut]
        public IResponseResult<BstPagesControls> Update(BstPagesControls bstPagesControls)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstPagesControlsService.Value.Update(bstPagesControls);
        }

        [HttpPost]
        public IResponseResult<BstPagesControls> Add(BstPagesControls bstPagesControls)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstPagesControlsService.Value.Add(bstPagesControls);
        }
    }
}

  
  
 //BstResourcesController.cs 
  
  
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AngBMS.Domain.Interfaces.Services;
using AngBMS.Domain.Models;
using Domain.Common;
using Domain.Interfaces.Shared;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace AngBMS.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BstResourcesController : ControllerBase
    {
        private readonly IServiceUnitOfWork _serviceUnitOfWork;
        public BstResourcesController(IServiceUnitOfWork serviceUnitOfWork)
        {
            _serviceUnitOfWork = serviceUnitOfWork;
        }

        [HttpGet]
        [Route("GetResources")]
        public IResponseResult<Dictionary<string, string>> GetResources(string resourceObject, string language, int companyId)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstResourcesService.Value.GetResources(resourceObject, language, companyId);
        }

        [HttpGet]
        [Route("GetResource")]
        public IResponseResult<BstResources> GetResource(string resourceObject, string resourceName, string language, int companyId)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstResourcesService.Value.GetResource(resourceObject, resourceName, language, companyId);
        }

        [HttpPut]
        public IResponseResult<BstResources> Update(BstResources bstResources)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstResourcesService.Value.Update(bstResources);
        }

        [HttpPost]
        public IResponseResult<BstResources> Add(BstResources bstResources)
        {
            using (_serviceUnitOfWork)
                return _serviceUnitOfWork.BstResourcesService.Value.Add(bstResources);
        }
    }
}  
 =======================================================================================
Service > BstResourcesService 
 
using AngBMS.Domain.Models;
using AngBMS.Service.Interfaces;
using Domain.Common;
using Domain.Enums;
using Domain.Interfaces.Repositories;
using Domain.Interfaces.Shared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace AngBMS.Service.Services
{
    public class BstResourcesService : IBstResourcesService
    {
        private IRepositoryUnitOfWork _repositoryUnitOfWork;
        public BstResourcesService(IRepositoryUnitOfWork repositoryUnitOfWork)
        {
            _repositoryUnitOfWork = repositoryUnitOfWork;
        }

        public IResponseResult<BstResources> Add(BstResources entity)
        {
            _repositoryUnitOfWork.BstResources.Value.Add(entity);
            return new ResponseResult<BstResources>() { Status = ResultStatus.Success, Data = entity };
        }

        public IResponseResult<IEnumerable<BstResources>> AddRange(IEnumerable<BstResources> entities)
        {
            _repositoryUnitOfWork.BstResources.Value.AddRange(entities);
            return new ResponseResult<IEnumerable<BstResources>>() { Status = ResultStatus.Success, Data = entities };
        }

        public IResponseResult<BstResources> Get(long id, int companyId)
        {
            var result = _repositoryUnitOfWork.BstResources.Value.Get(id, companyId);
            return new ResponseResult<BstResources>() { Status = ResultStatus.Success, Data = result };
        }

        public IResponseResult<BstResources> Get(long Id)
        {
            var result = _repositoryUnitOfWork.BstResources.Value.Get(Id);
            return new ResponseResult<BstResources>() { Status = ResultStatus.Success, Data = result };
        }
//The Below method will get the reosurce of the parent page and sub pages below
        public IResponseResult<Dictionary<string, string>> GetResources(string resourceObject, string language, int companyId)
        {
            var bstPage = _repositoryUnitOfWork.BstPages.Value.Find(e => e.Key.ToUpper().Contains(resourceObject.ToUpper()) && e.CompanyId == companyId).FirstOrDefault();
            var keys = new List<string>();

            if (bstPage != null)
            {
                var bstChildPagesIDz = _repositoryUnitOfWork.BstPagesParent.Value.Find(p => p.PageId == bstPage.Id).Select(p => p.SubPageId);
                var bstChildPages = _repositoryUnitOfWork.BstPages.Value.Find(e => bstChildPagesIDz.Contains(e.Id));

                keys = new List<string> { bstPage.Key };
                foreach (var page in bstChildPages)
                {
                    keys.Add(page.Key);
                }                
            }

            var lstResources = _repositoryUnitOfWork.BstResources.Value.Find(e => keys.Contains(e.Object) && e.Language == language && e.CompanyId == companyId);
            var result = lstResources.GroupBy(e => e.Name).Select(e => new { label = e.First().Name, e.First().Value }).ToDictionary(e => e.label, e => e.Value);

            return new ResponseResult<Dictionary<string, string>>() { Status = ResultStatus.Success, Data = result };
        }

        public IResponseResult<BstResources> GetResource(string resourceObject, string resourceName, string language, int companyId)
        {
            var result = _repositoryUnitOfWork.BstResources.Value.Find(e => e.Object == resourceObject && e.Name == resourceName && e.Language == language && e.CompanyId == companyId).SingleOrDefault();
            return new ResponseResult<BstResources>() { Status = ResultStatus.Success, Data = result };

        }

        public IResponseResult<IEnumerable<BstResources>> GetAll()
        {
            var result = _repositoryUnitOfWork.BstResources.Value.GetAll().ToList();
            return new ResponseResult<IEnumerable<BstResources>>() { Status = ResultStatus.Success, Data = result };
        }

        public IResponseResult<BstResources> Remove(BstResources entity)
        {
            var result = _repositoryUnitOfWork.BstResources.Value.Remove(entity);
            return new ResponseResult<BstResources>() { Status = ResultStatus.Success, Data = entity };
        }

        public IResponseResult<IEnumerable<BstResources>> RemoveRange(IEnumerable<BstResources> models)
        {
            var result = _repositoryUnitOfWork.BstResources.Value.RemoveRange(models);
            return new ResponseResult<IEnumerable<BstResources>>() { Status = ResultStatus.Success, Data = models };
        }

        public IResponseResult<BstResources> Update(BstResources entity)
        {
            _repositoryUnitOfWork.BstResources.Value.Update(entity);
            return new ResponseResult<BstResources>() { Status = ResultStatus.Success, Data = entity };
        }
    }
}

//--------------------------------------
Service > BstPagesControlsService 
 
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text;
using System.Linq;
using AngBMS.Service.Interfaces;
using Domain.Interfaces.Repositories;
using AngBMS.Domain.Models;
using Domain.Interfaces.Shared;
using Domain.Common;
using Domain.Enums;

namespace AngBMS.Service.Services
{
    public class BstPagesControlsService : IBstPagesControlsService
    {
        private IRepositoryUnitOfWork _repositoryUnitOfWork;
        public BstPagesControlsService(IRepositoryUnitOfWork repositoryUnitOfWork)
        {
            _repositoryUnitOfWork = repositoryUnitOfWork;
        }

        public IResponseResult<BstPagesControls> Add(BstPagesControls entity)
        {
            _repositoryUnitOfWork.BstPagesControls.Value.Add(entity);
            return new ResponseResult<BstPagesControls>() { Status = ResultStatus.Success, Data = entity };
        }

        public IResponseResult<IEnumerable<BstPagesControls>> AddRange(IEnumerable<BstPagesControls> entities)
        {
            _repositoryUnitOfWork.BstPagesControls.Value.AddRange(entities);
            return new ResponseResult<IEnumerable<BstPagesControls>>() { Status = ResultStatus.Success, Data = entities };
        }

        public IResponseResult<BstPagesControls> Get(long id, int companyId)
        {
            var result = _repositoryUnitOfWork.BstPagesControls.Value.Get(id, companyId);
            return new ResponseResult<BstPagesControls>() { Status = ResultStatus.Success, Data = result };
        }

        public IResponseResult<BstPagesControls> Get(long Id)
        {
            var result = _repositoryUnitOfWork.BstPagesControls.Value.Get(Id);
            return new ResponseResult<BstPagesControls>() { Status = ResultStatus.Success, Data = result };
        }
//The below method is to get the controls on the parent page and sub pages
        public IResponseResult<IEnumerable<BstPagesControls>> GetByPageKey(string key, string moduleCode, int companyId)
        {
            var bstPage = _repositoryUnitOfWork.BstPages.Value.Find(e => e.Key.ToUpper().Contains(key.ToUpper())
              && e.ModuleCode.ToUpper() == moduleCode.ToUpper() && e.CompanyId == companyId).FirstOrDefault();
            var result = new List<BstPagesControls>();

            if (bstPage != null)
            {
                var bstChildPagesIDz = _repositoryUnitOfWork.BstPagesParent.Value.Find(p => p.PageId == bstPage.Id).Select(p => p.SubPageId);
                var bstChildPages = _repositoryUnitOfWork.BstPages.Value.Find(e => bstChildPagesIDz.Contains(e.Id));

                Expression<Func<BstPagesControls, object>> expr1 = i => i.BstPagesControlsParams;
                Expression<Func<BstPagesControls, object>> expr2 = i => i.InverseControl;
                Expression<Func<BstPagesControls, object>>[] expressions = { expr1, expr2 };
                result = _repositoryUnitOfWork.BstPagesControls.Value.Find(e => e.PageId == bstPage.Id || bstChildPages.Select(c => c.Id).Contains(e.PageId), expressions).ToList();
                
            }
            return new ResponseResult<IEnumerable<BstPagesControls>>() { Status = ResultStatus.Success, Data = result };
        }

        public IResponseResult<IEnumerable<BstPagesControls>> GetAll()
        {
            var result = _repositoryUnitOfWork.BstPagesControls.Value.GetAll().ToList();
            return new ResponseResult<IEnumerable<BstPagesControls>>() { Status = ResultStatus.Success, Data = result };
        }

        public IResponseResult<BstPagesControls> Remove(BstPagesControls entity)
        {
            var result = _repositoryUnitOfWork.BstPagesControls.Value.Remove(entity);
            return new ResponseResult<BstPagesControls>() { Status = ResultStatus.Success, Data = entity };
        }

        public IResponseResult<IEnumerable<BstPagesControls>> RemoveRange(IEnumerable<BstPagesControls> models)
        {
            var result = _repositoryUnitOfWork.BstPagesControls.Value.RemoveRange(models);
            return new ResponseResult<IEnumerable<BstPagesControls>>() { Status = ResultStatus.Success, Data = models };
        }
        public IResponseResult<BstPagesControls> Update(BstPagesControls entity)
        {
            _repositoryUnitOfWork.BstPagesControls.Value.Update(entity);
            return new ResponseResult<BstPagesControls>() { Status = ResultStatus.Success, Data = entity };
        }
    }
}
====================================================================================
Front End Part 

Services Section

1-Common Services    
( all we need below is the method called   DynamicCallWithParams(url: string, params: SelectItem[] = []): Observable<any>  )

import { Injectable } from '@angular/core';
import { FormGroup, FormControl, FormBuilder } from '@angular/forms';
import { Observable, of } from 'rxjs';
import { SelectItem, Message, ConfirmationService } from 'primeng/api';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { MessageService } from 'primeng/components/common/messageservice';
import { Mapper, User, Application, CustomerTypes, ResponseResult } from '../../models/data-models';
import { FinancialAccount } from '../../models/data-models'
import { environment } from '../../../environments/environment';
import { AuthenticationService } from './authentication.service';
import { NgxSpinnerService } from 'ngx-spinner';

import * as FileSaver from 'file-saver';
import * as XLSX from 'xlsx';

const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
const EXCEL_EXTENSION = '.xlsx';


@Injectable()
export class CommonService {


  msgs: Message[] = [];

  errors: Mapper<string> = new Mapper();

  tab: any;

  private apiUrl = environment.sharedSetupAPI + 'api/Helper/';
  
  constructor(private messageService: MessageService, private httpClient: HttpClient, public fb: FormBuilder, private http: HttpClient, private auth: AuthenticationService, public confirmationService: ConfirmationService, private spinner: NgxSpinnerService) { }
  
  public exportAsExcelFile(json: any[], excelFileName: string): void {
    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json);
    const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };
    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    this.saveAsExcelFile(excelBuffer, excelFileName);
  }

  private saveAsExcelFile(buffer: any, fileName: string): void {
    const data: Blob = new Blob([buffer], { type: EXCEL_TYPE });
    FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);
  }

  isFieldValid(formGroup: FormGroup, field: string) {
    return formGroup.get(field).valid;
  }

  setErrors(formControlName: string, errorText: string) {
    this.errors.add(formControlName, errorText);
  }

  getError(formGroup: FormGroup, field: string) {

    let error = !this.isFieldValid(formGroup, field) ? this.errors.get(field) : "";
    return error;
  }


  public handleErrorObservable(response: Response | any) {
    debugger;
    let errorMessages: Message[] = [];
    let errorSubject = response.error.Message;
    let errorDetails: string = "";
    if (response.error.ModelState) {
      let validationErrorDictionary = response.error.ModelState;


      for (var fieldName in validationErrorDictionary) {
        if (validationErrorDictionary.hasOwnProperty(fieldName)) {
          errorDetails = errorDetails + '<li>' + validationErrorDictionary[fieldName].toString() + '</li>';
        }
      }
      errorMessages.push({ severity: "error", summary: errorSubject, detail: errorDetails });
      return Observable.throw(errorMessages);
    }

    errorMessages.push({ severity: "error", summary: "Error", detail: errorSubject });
    return Observable.throw(errorMessages);

  }


  pushError(errors: Message[]) {
    this.messageService.clear();
    this.messageService.addAll(errors);
  }

  addMessage(type: string, summary: string, messageText: string) {
    this.messageService.clear();
    this.messageService.add({ severity: type, summary: summary, detail: messageText });
  }

  pushMessage(type: string, summary: string, messageText: string) {
    this.msgs = [];
    this.messageService.clear();
    this.messageService.add({ severity: type, summary: summary, detail: messageText });
    this.msgs.push({ severity: type, summary: summary, detail: messageText });
  }

  displayFieldCss(formGroup: FormGroup, field: string) {
    return {
      'has-error': this.isFieldValid(formGroup, field),
      'has-feedback': this.isFieldValid(formGroup, field)
    };
  }

  validateAllFormFields(formGroup: FormGroup) {
    Object.keys(formGroup.controls).forEach(field => {
      console.log(field);
      const control = formGroup.get(field);
      if (control instanceof FormControl) {
        control.markAsTouched({ onlySelf: true });
      } else if (control instanceof FormGroup) {
        this.validateAllFormFields(control);
      }
    });
  }

  setMultiSelectValues(values: string): string[] {
    values = values == null ? "" : values;
    let splitableText: boolean = values.indexOf(',') >= 0;

    let array = splitableText ? values.split(',') : [values];
    return array;
  };

  resetForm(formGroup: FormGroup) {
    formGroup.reset();
    this.messageService.clear();

    // Object.keys(formGroup.controls).forEach(key => {
    //   formGroup.get(key).setValue("");
    // });
  }

  getLoggedInUser(): User {
    return this.auth.getLoggedInUser();
  }

  showOrHideSpinner(loading: boolean) {
    if (loading) {
      this.spinner.show();
    } else {
      this.spinner.hide();
    }
  }
   
  DynamicCall(url: string, filter:string = ""): Observable<SelectItem[]> {
    let httpHeaders = new HttpHeaders().set('Accept', 'application/json').set('Cache-Enabled', 'true');
    let httpParams = new HttpParams().set('query', filter);
    return this.httpClient.get<SelectItem[]>(url, { headers: httpHeaders, params: httpParams, responseType: 'json' });
  };


//This Method is used to send any requirest URL with parameters
  DynamicCallWithParams(url: string, params: SelectItem[] = []): Observable<any> {
    let httpHeaders = new HttpHeaders().set('Accept', 'application/json').set('Cache-Enabled', 'true');
    let httpParams = new HttpParams();
    params.forEach(param => {
      httpParams = httpParams.set(param.label, param.value.toString());
    });
    return this.httpClient.get<any>(url, { headers: httpHeaders, params: httpParams, responseType: 'json' });
  };
  
  uploadFiles(formData: FormData): Observable<any[]> {
    let httpHeaders = new HttpHeaders().set('Accept', 'application/json');

    return this.httpClient.post<any[]>(this.apiUrl + "UploadFiles", formData, { headers: httpHeaders, responseType: 'json' })
      .catch(this.handleErrorObservable);
  }

  downloadFile(fileName): Observable<any> {
    let httpHeaders = new HttpHeaders().set('Accept').set('content-type', 'application/json');
    return this.httpClient.get<any>(this.apiUrl + "DownloadFile/" + fileName, { headers: httpHeaders, responseType: 'blob' as 'json' });
  }

 

  // getBlockedControls(Username: string, FormMenuID: number, ApplicationID: number, CompanyID: number): Observable<string[]> {
  //   let header = new Headers();
  //   header.append('Content-Type', 'application/json');
  //   let options = new RequestOptions();
  //   options.headers = header;


  //   // let BlockedControls: string[] = ['applicationType', 'schedulerName'];

  //   let BlockedControls: string[] = [];

  //   return Observable.of(BlockedControls);
  //   // return this.http.get(environment.apiUrl + "/api/GetBlockedControls/" + Username + "/" + FormMenuID + "/" +
  //   //   ApplicationID + "/" + CompanyID, options).map(res => { return res.json() });
  // }

  // validateSecuirtyControls(Username: string, FormMenuID: number, ApplicationID: number, CompanyID: number, formGroups: FormGroup[]) {


  //   this.getBlockedControls(Username, FormMenuID, ApplicationID, CompanyID).subscribe(
  //     data => {

  //        data.forEach(ctrlName => {
  //         formGroups.forEach(formGroup => {
  //           Object.keys(formGroup.controls).forEach(formControlName => {
  //             if (ctrlName == formControlName)
  //               formGroup.get(formControlName).disable();
  //           });
  //         });
  //       });
  //       // localStorage.setItem("BlockedControls", JSON.stringify(data));
  //       // var dtblockedControls = JSON.parse(localStorage.getItem("BlockedControls"));
  //       // debugger;
  //       // dtblockedControls.Table.forEach(row => {
  //       //   formGroups.forEach(formGroup => {
  //       //     Object.keys(formGroup.controls).forEach(formControlName => {
  //       //       if (row["CONTROL_ID"] == formControlName)
  //       //         formGroup.get(formControlName).disable();
  //       //     });
  //       //   });
  //       // });
  //     });
  // }

}


2-SstResources.service.ts

(this service is used to call service in the controller SstResources)
  
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { Observable } from 'rxjs';
import { HttpHeaders, HttpParams, HttpClient } from '@angular/common/http';
import { BstResources, ResponseResult } from 'src/app/models/data-models';

@Injectable({
  providedIn: 'root'
})
export class BstResourcesService {

  constructor(private http: HttpClient) { }

  Resources: any = {};
  private apiUrl = environment.apiUrl + 'api/BstResources/';
  private httpHeaders = new HttpHeaders().set('Accept', 'application/json').set('Cache-Enabled', 'true');
  //Understand
  getResources(resourceObject: string, language: string, companyId: number): Observable<any> {
    let httpParams = new HttpParams()
      .set('resourceObject', resourceObject)
      .set('language', language)
      .set('companyId', companyId.toString());

    return this.http.get<any>(this.apiUrl + "GetResources", { headers: this.httpHeaders, params: httpParams, responseType: 'json' });
  }
  //Understand
  getResource(resourceObject: string, resourceName: string, language: string, companyId: number): Observable<ResponseResult<BstResources>> {
    let httpParams = new HttpParams()
      .set('resourceObject', resourceObject)
      .set('resourceName', resourceName)
      .set('language', language)
      .set('companyId', companyId.toString());

    return this.http.get<ResponseResult<BstResources>>(this.apiUrl + "GetResource", { headers: this.httpHeaders, params: httpParams, responseType: 'json' });
  }
  //UnderStand
  updateResource(bstResource: BstResources): Observable<ResponseResult<BstResources>> {
    return this.http.put<ResponseResult<BstResources>>(this.apiUrl, bstResource, { headers: this.httpHeaders, responseType: 'json' });
  }
  //Understand
  postResource(bstResource: BstResources): Observable<ResponseResult<BstResources>> {
    return this.http.post<ResponseResult<BstResources>>(this.apiUrl, bstResource, { headers: this.httpHeaders, responseType: 'json' });
  }
}

//This method is used to call services in the bstPagesController 

3-bst-pages-controls.service.ts

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from 'src/environments/environment';
import { BstPagesControls, ResponseResult } from 'src/app/models/data-models';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class BstPagesControlsService {
 
  constructor(private http: HttpClient) { }

  Resources: any = {};
  private apiUrl = environment.apiUrl + 'api/BstPagesControls/';
  private httpHeaders = new HttpHeaders().set('Accept', 'application/json').set('Cache-Enabled', 'true');

  GetByPageKey(key: string, moduleCode: string, companyId: number): Observable<ResponseResult<BstPagesControls[]>>{
    let response = this.http.get<ResponseResult<BstPagesControls[]>>(this.apiUrl + "GetByPageKey/" + key + "/" + moduleCode + "/" + companyId, { headers: this.httpHeaders, responseType: 'json' });
    return response;
  }

  GetById(id: number, companyId: number): Observable<ResponseResult<BstPagesControls>> {
    return this.http.get<ResponseResult<BstPagesControls>>(this.apiUrl + id + "/" + companyId, { headers: this.httpHeaders, responseType: 'json' });
  }
  
  Update(BstPagesControls: BstPagesControls): Observable<ResponseResult<BstPagesControls>> {
    return this.http.put<ResponseResult<BstPagesControls>>(this.apiUrl, BstPagesControls, { headers: this.httpHeaders, responseType: 'json' });
  }
}

4-Dynamic-services   
(this service is responsible to create form controls and grouping it under 
form group from the data comes from controller called BstPagesController.cs)

import { Injectable } from '@angular/core';
import { ControlBase } from '../controls/dynamic-search/control-classes/control-base';
import { FormControl, Validators, FormGroup } from '@angular/forms';
import { SelectItem } from 'primeng/api';
import { CommonService } from './common.service';
import { ParameterType, ParamsType, BstPagesControls, User, ControlType, Application, CoreDomains, Domains } from '../../models/data-models';
import { ControlTextbox } from '../controls/dynamic-search/control-classes/control-textbox';
import { ControlAutocomplete } from '../controls/dynamic-search/control-classes/control-autocomplete';
import { ControlDropdown } from '../controls/dynamic-search/control-classes/control-dropdown';
import { ControlCalendar } from '../controls/dynamic-search/control-classes/control-calendar';
import { ControlRadioButton } from '../controls/dynamic-search/control-classes/control-radiobutton';
import { ControlCheckbox } from '../controls/dynamic-search/control-classes/control-checkbox';
import { AuthenticationService } from './authentication.service';
import { BstPagesControlsService } from './bst-pages-controls.service';
import { environment } from 'src/environments/environment';
const models = require('../../models/data-models');

@Injectable({
  providedIn: 'root'
})
export class DynamicControlService {

  private apiUrl = environment.apiUrl;
  private user: User = new User();
  bstPagesControls: BstPagesControls[] = [];
  controls: any = [];

  constructor(private cs: CommonService, private bstPagesControlsService: BstPagesControlsService,
    private authenticationService: AuthenticationService) {
    this.user = this.authenticationService.getLoggedInUser();
  }
  //This Method will grouping array of form controls
  toFormGroup(controls: ControlBase<any>[]) {
    debugger;
    let group: any = {};
    controls.forEach(control => {
      group[control.key] = control.required ? new FormControl(control.value || '', Validators.required)
        : new FormControl(control.value || '');
    });
    return new FormGroup(group);
  }
   //used be checkbox compoennt
  convertToBoolean(value: any) {
    if (value == 'false' || value == false) {
      return false;
    } else if (value == 'true' || value == true) {
      return true;
    } else if (!isNaN(value)) {
      return Number(value) == 1 ? true : false;
    } else {
      return value;
    }
  }


  //This Method will covnert Array of PagesControls to array of form controls
  async generateControls(key: string, moduleCode: string, companyId: number): Promise<any[]> {
    //console.log('dynamic generate Controls start:' + new Date().toLocaleTimeString());
    let getControlsByKey$ = this.bstPagesControlsService.GetByPageKey(key, moduleCode, companyId);
    await getControlsByKey$.toPromise().then(
      data => {
        this.bstPagesControls = data.data;
        this.controls = [];
        let control: ControlBase<any> = new ControlBase();
        //console.log('dynamic generate Controls start forEach:' + new Date().toLocaleTimeString());
        this.bstPagesControls.forEach(ctrl => {
          control = this.mapControls(ctrl);
          this.controls.push(control)
        });
        //console.log('dynamic generate Controls end forEach:' + new Date().toLocaleTimeString());
      }
    );
    return this.controls;
  }
  //This method is used to map data with suitable contol 
  mapControls(control: BstPagesControls): ControlBase<any> {
    switch (control.controlType) {
      case ControlType.Textbox:
        {
          return new ControlTextbox({
            id: control.id,
            controlType: control.controlType,
            key: control.key,
            form: control.form,
            labelKey: control.labelKey,
            allowEditLabel: control.allowEditLabel ? true : false,
            required: control.isRequired ? true : false,
            allowRequired: control.allowRequired ? true : false,
            hidden: control.isHidden ? true : false,
            allowHidden: control.allowHidden ? true : false,
            disabled: control.isDisabled ? true : false,
            allowDisabled: control.allowDisabled ? true : false,
            order: control.order,
            className: control.className,
            isDynamic: control.isDynamic ? true : false,
            formType: control.formType,

            type: control.textType
          });
        }
      case ControlType.AutoComplete:
        {
          let childControls: ControlBase<any>[] = [];
          let child: ControlBase<any> = new ControlBase();

          control.inverseControl.forEach(ctrl => {
            child = this.mapControls(ctrl);
            childControls.push(child);
          });

          return new ControlAutocomplete({
            id: control.id,
            controlType: control.controlType,
            key: control.key,
            form: control.form,
            labelKey: control.labelKey,
            allowEditLabel: control.allowEditLabel ? true : false,
            required: control.isRequired ? true : false,
            allowRequired: control.allowRequired ? true : false,
            hidden: control.isHidden ? true : false,
            allowHidden: control.allowHidden ? true : false,
            disabled: control.isDisabled ? true : false,
            allowDisabled: control.allowDisabled ? true : false,
            order: control.order,
            className: control.className,
            isDynamic: control.isDynamic ? true : false,
            formType: control.formType,

            paramsType: control.paramsType,
            serviceUrl: control.serviceUrl,
            controlParams: control.bstPagesControlsParams,
            childControls: childControls
          });
        }
      case ControlType.Dropdown:
        {
          let childControls: ControlBase<any>[] = [];
          let child: ControlBase<any> = new ControlBase();

          control.inverseControl.forEach(ctrl => {
            child = this.mapControls(ctrl);
            childControls.push(child);
          });

          return new ControlDropdown({
            id: control.id,
            controlType: control.controlType,
            key: control.key,
            form: control.form,
            labelKey: control.labelKey,
            allowEditLabel: control.allowEditLabel ? true : false,
            required: control.isRequired ? true : false,
            allowRequired: control.allowRequired ? true : false,
            hidden: control.isHidden ? true : false,
            allowHidden: control.allowHidden ? true : false,
            disabled: control.isDisabled ? true : false,
            allowDisabled: control.allowDisabled ? true : false,
            order: control.order,
            className: control.className,
            isDynamic: control.isDynamic ? true : false,
            formType: control.formType,

            paramsType: control.paramsType,
            serviceUrl: control.serviceUrl,
            controlParams: control.bstPagesControlsParams,
            childControls: childControls
          });
        }
      case ControlType.Calendar:
        {
          return new ControlCalendar({
            id: control.id,
            controlType: control.controlType,
            key: control.key,
            form: control.form,
            labelKey: control.labelKey,
            allowEditLabel: control.allowEditLabel ? true : false,
            required: control.isRequired ? true : false,
            allowRequired: control.allowRequired ? true : false,
            hidden: control.isHidden ? true : false,
            allowHidden: control.allowHidden ? true : false,
            disabled: control.isDisabled ? true : false,
            allowDisabled: control.allowDisabled ? true : false,
            order: control.order,
            className: control.className,
            isDynamic: control.isDynamic ? true : false,
            formType: control.formType
          });
        }
      case ControlType.RadioButton:
        {
          let childControls: ControlBase<any>[] = [];
          let child: ControlBase<any> = new ControlBase();

          control.inverseControl.forEach(ctrl => {
            child = this.mapControls(ctrl);
            childControls.push(child);
          });

          return new ControlRadioButton({
            id: control.id,
            controlType: control.controlType,
            key: control.key,
            form: control.form,
            labelKey: control.labelKey,
            allowEditLabel: control.allowEditLabel ? true : false,
            required: control.isRequired ? true : false,
            allowRequired: control.allowRequired ? true : false,
            hidden: control.isHidden ? true : false,
            allowHidden: control.allowHidden ? true : false,
            disabled: control.isDisabled ? true : false,
            allowDisabled: control.allowDisabled ? true : false,
            order: control.order,
            className: control.className,
            isDynamic: control.isDynamic ? true : false,

            paramsType: control.paramsType,
            serviceUrl: control.serviceUrl,
            controlParams: control.bstPagesControlsParams,
            childControls: childControls
          });
        }
      case ControlType.Checkbox:
        {
          let childControls: ControlBase<any>[] = [];
          let child: ControlBase<any> = new ControlBase();

          control.inverseControl.forEach(ctrl => {
            child = this.mapControls(ctrl);
            childControls.push(child);
          });

          return new ControlCheckbox({
            id: control.id,
            controlType: control.controlType,
            key: control.key,
            form: control.form,
            labelKey: control.labelKey,
            allowEditLabel: control.allowEditLabel ? true : false,
            required: control.isRequired ? true : false,
            allowRequired: control.allowRequired ? true : false,
            hidden: control.isHidden ? true : false,
            allowHidden: control.allowHidden ? true : false,
            disabled: control.isDisabled ? true : false,
            allowDisabled: control.allowDisabled ? true : false,
            order: control.order,
            className: control.className,
            isDynamic: control.isDynamic ? true : false,
            childControls: childControls
          });
        }
      default:
        {
          let childControls: ControlBase<any>[] = [];
          let child: ControlBase<any> = new ControlBase();

          control.inverseControl.forEach(ctrl => {
            child = this.mapControls(ctrl);
            childControls.push(child);
          });

          return new ControlBase({
            id: control.id,
            controlType: control.controlType,
            key: control.key,
            form: control.form,
            labelKey: control.labelKey,
            allowEditLabel: control.allowEditLabel ? true : false,
            required: control.isRequired ? true : false,
            allowRequired: control.allowRequired ? true : false,
            hidden: control.isHidden ? true : false,
            allowHidden: control.allowHidden ? true : false,
            disabled: control.isDisabled ? true : false,
            allowDisabled: control.allowDisabled ? true : false,
            order: control.order,
            className: control.className,
            isDynamic: control.isDynamic ? true : false,
            childControls: childControls
          });
        }
    }
  }


  //This Method is used with fill dropdown and autocomplete  when search to replace the
  //service URL parameter based on it's type
  
  //we have 2 different type on the level table Bst_pages_controls 
  // (checked on the column called param type on the table bst_pages_controls)
  //    1  -->    ParamsType.PathParameter  
  //    2  -->     ParamType.HeaderParameter
  
  
  async fillControlOptions(Control: any, form, query: string = "") {
    let serviceUrl = this.apiUrl + Control.serviceUrl;

    let values: SelectItem[] = [{ label: "Select", value: null }];
    if (Control.controlType == ControlType.RadioButton) {
      values = [];
    }

    let validDependentValues: boolean = true;
    for (var param of Control.controlParams) {
      if (param.type == ParameterType.Control && param.isRequired) {
        let value = form.controls[param.dependOnKey].value;

        if (value == null || value == undefined || value == '') {
          validDependentValues = false;
          break;
        }

        if (typeof value == 'object')
          value = form.controls[param.dependOnKey].value.value;
      }
    }

    if (validDependentValues) {
      let serviceParams: SelectItem[] = [];
      debugger;
      if (Control.paramsType === ParamsType.PathParameter) {
        Control.controlParams.forEach(param => {
          switch (param.type) {
		  //when the control depend on other control
            case ParameterType.Control:
              {
                let value = form.controls[param.dependOnKey].value;
                if (value != null && typeof value == 'object')
                  value = form.controls[param.dependOnKey].value.value;

                serviceUrl = serviceUrl.replace("{{" + param.name + "}}", value);
                break;
              }
			  //for autocomplete
            case ParameterType.Query:
              serviceUrl = serviceUrl.replace("{{" + param.name + "}}", query);
              break;
			  //get all entity by company ID
            case ParameterType.CompanyId:
              serviceUrl = serviceUrl.replace("{{" + param.name + "}}", this.user.companyId.toString());
              break;
		      //get all entity by branch ID
            case ParameterType.BranchId:
              serviceUrl = serviceUrl.replace("{{" + param.name + "}}", this.user.branchId.toString());
              break;
			  //get all entity by user name
            case ParameterType.Username:
              serviceUrl = serviceUrl.replace("{{" + param.name + "}}", this.user.userName);
              break;
			 //get all entity by language
            case ParameterType.LanguageId:
              serviceUrl = serviceUrl.replace("{{" + param.name + "}}", this.user.language.toString());
              break;
			=//get all entity by Enum (domain and domain values)
            case ParameterType.Enum:
              let enumKeys: string[] = param.dependOnKey.split("/");
              serviceUrl = serviceUrl.replace("{{" + param.name + "}}", models[enumKeys[0]][enumKeys[1]]);
              break;         
          }
        });
      }
      else if (Control.paramsType === ParamsType.HeaderParameter) {
        Control.controlParams.forEach(param => {
          switch (param.type) {
            case ParameterType.Control:
              {
                let value = form.controls[param.dependOnKey].value;
                if (value != null && typeof value == 'object')
                  value = form.controls[param.dependOnKey].value.value;
                serviceParams.push({ label: param.name, value: value })
                break;
              }
            case ParameterType.Query:
              serviceParams.push({ label: param.name, value: query });
              break;
            case ParameterType.CompanyId:
              serviceParams.push({ label: param.name, value: this.user.companyId });
              break;
            case ParameterType.BranchId:
              serviceParams.push({ label: param.name, value: this.user.branchId });
              break;
            case ParameterType.Username:
              serviceParams.push({ label: param.name, value: this.user.userName });
              break;
            case ParameterType.LanguageId:
              serviceParams.push({ label: param.name, value: this.user.language });
              break;
            case ParameterType.Enum:
              let enumKeys: string[] = param.dependOnKey.split("/");
              serviceParams.push({ label: param.name, value: models[enumKeys[0]][enumKeys[1]] });
              break;
            }
        });
      }
//this method will take the serviceURL splitted with params  + params to generate URL to hit the server API direct
      let dynamicCall$ = this.cs.DynamicCallWithParams(serviceUrl, serviceParams);
      await dynamicCall$.toPromise().then(res => {
        if (res.length > 0) {
          res.forEach(item => {
            values.push({ label: item.label, value: item.value });
          });
          Control.options = values;
        }
        else if (res.data.length > 0) {
          res.data.forEach(item => {
            values.push({ label: item.label, value: item.value });
          });
          Control.options = values;
        }
        else { Control.options = [] }
      });
    }
    else {
      Control.options = [];
    }
    return Control;
  }
}
============================================================================
Modles

import { Observable } from 'rxjs';

export class Mapper<T> {
  private items: { [key: string]: T };

  constructor() {
    this.items = {};
  }

  add(key: string, value: T): void {
    this.items[key] = value;
  }

  has(key: string): boolean {
    return key in this.items;
  }

  get(key: string): T {
    return this.items[key];
  }

}

export class FinancialAccount {
  Id: number;
  Name: string;
}

export class ResponseResult<T> {
  data: T;
  errors: string[];
  status: Status;

}

export interface IService<T> {
  GetById(Id: number): Observable<ResponseResult<T>>;
  Post(entity: T): Observable<ResponseResult<T>>;
  Put(entity: T): Observable<ResponseResult<T>>;
  Delete(Id: number): Observable<ResponseResult<T>>;
}

export enum Application {
  GeneralInsurance = 8,
  MedicalInsurance = 10,
  LifeInsurance = 27,
  CustomerPortal = 28,
  Greeting = 4,
  Schedular = 306,
  Core = 32,
  SharedSetup = 5,
  Reinsurance = 320,
  BMS = 301
}

export enum DomainId {
  Languages = 3144,
  LineOfBusiness = 291,
  MILineOfBusiness = 293,
  LifeLineOfBusiness = 294,
  CPLineOfBusiness = 295,

  SubLineOfBuisness = 296,
  MISubLineOfBuisness = 297,
  LifeSubLineOfBuisness = 298,
  CPSubLineOfBuisness = 299,

  UnearnedCalcType = 300,
  TreatyType = 301,
  RateBasis = 302,
  RateType = 303,
  RatePer = 304,
  TermBasis = 305,
  TargerGender = 306,
  BasicCover = 307,
  MarineClause = 308
}

export class loginInfo {
  userName: string;
  password: string;
  companyId: number;
  branchId: number;
  languageId: number;
}


export class User {
  companyId: number;
  userName: string;
  branchId: number;
  language: number;
}

export class MenuItem {
  Id: number;
  parentId: number;
  label: string;
  AlternativeName: string;
  Url: string;
  icon: string;
  Application: Application;
  routerLink: string;
  command?: (event?: any) => void;
  items: MenuItem[];
}


export enum MenuType {
  Application = 1,
  Module = 2,
  SubModule = 3,
  Pages = 4
}

export class DataMenus {

  isError: boolean;
  error: string;
  errorCode: string;
  aPIVersion: string;
  data: SystemMenus[];

}


export class SystemMenus {
  cAM_APP_ID: number;
  CAM_FRM_CL_ID: number;
  cAM_FRM_CODE: string;
  cAM_MOD_CODE: string;
  cAM_SMU_ID: number;
  cAM_SYS_CODE: string;
  cRG_COM_ID: number;
  hELP_PAGE_URL: string;
  iD: number;
  mENU_ORDER: number;
  mENU_TYPE: number;
  nAME: string;
  nAME2: string;
  uRL: string;
  sHOW_IN_MENU: number;
}

export class Authorized {
  data: boolean;
  isError: boolean;
  errorCode: string;
  aPIVersion: string;
  error: string;
}

//to handel(map) returned data from CoreApi and use them in P-dropdownList
export class selectItem {
  label?: string;
  value: any;
}
export class Currency {
  ExrateValue: number;
  CurrencyCode: string;

  constructor(value = 0, code = "") {
    this.CurrencyCode = code;
    this.ExrateValue = value;
  }
}

export class CustomerTypes {
  Id: number;
  Name: string;
  Name2: string;
  CompanyId?: number;
  CreationUser: string;
  CreationDate: Date;
  ModificationUser: string;
  ModificationDate: Date;
}

export class bstCommissions {
  id: number;
  name: string;
  name2: string;
  companyId: number;
  partyId: number;
  classId: number;
  policyType: number;
  commissionPercent: number;
  commissionAmount: number;
  effectiveDate: Date;
  expiryDate: Date;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate: Date;

}
export enum VoucherSide {
  Debit = 1,
  Credit = 2
}

export enum NumberTypes {
  Number = 1,
  Decimal = 2,
  Percentage = 3,
  Integer = 4,
}

export enum MessageType {
  Info = 1,
  Success = 2,
  Warn = 3,
  Error = 4,
}

export enum Codes {
  BuildingType = 6,
  CeilingType = 7
}


export enum SegmentType {
  Quick_Price_Segment = 1,
  Quotation_Segment = 2,
  Renwal_Segment = 3,
}

export class BstModules {
  public id: number;
  public code: string
  public name: string
  public name2: string
  public notes: string
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;
}

export class BstPagesControls {
  public id: number;
  public key: string;
  public form: string;
  public labelKey: string;
  public allowEditLabel?: number;
  public allowRequired?: number;
  public isRequired?: number;
  public allowHidden?: number;
  public isHidden?: number;
  public allowDisabled?: number;
  public isDisabled?: number;
  public order?: number;
  public controlType: string;
  public textType: string;
  public paramsType?: number;
  public className: string;
  public serviceUrl: string;
  public isDynamic?: number;
  public formType?: number;
  public pageId: number;
  public controlId?: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;
  public inverseControl?: BstPagesControls[];
  public bstPagesControlsParams?: BstPagesControlsParams[];
}

export class BstPagesControlsParams {
  public id: number;
  public name: string;
  public type: number;
  public dependOnKey?: string;
  public isRequired: number;
  public systemId?: number;
  public controlId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;
}


export class StandardModel {
  public id: number;
  public companyId: number;
  public NumberField: number;
  Field: string;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;
  public ArrayField: Array<StandardModel>;
}

export enum SourceType {
  Domains = 1,
  Service = 2
}

export enum ControlType {
  Textbox = 'textbox',
  Dropdown = 'dropdown',
  AutoComplete = 'autoComplete',
  Calendar = 'calendar',
  RadioButton = 'radiobutton',
  Checkbox = 'checkbox'
}

export enum ParamsType {
  PathParameter = 1,
  HeaderParameter = 2
}

export enum ParameterType {
  Control = 1,
  Query = 2,
  CompanyId = 3,
  BranchId = 4,
  Username = 5,
  LanguageId = 6,
  Enum = 7
}

export enum ViewMode {
  Block = 1,
  Dialog = 2
}

export class BstResources {
  public object: string;
  public name: string;
  public value: string;
  public language: string;
  public companyId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate: Date;
}


export class BstClasses {
  public id: number;
  public classId: number;
  public code: string;
  public abbreviation: string;
  public name: string;
  public name2: string;
  public companyId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate: Date;
  public bstPolicyTypes: Array<BstPolicyTypes> = [];
}

export class BstPolicyTypes {
  public id: number;
  public code: string;
  public abbreviation: string;
  public name: string;
  public name2: string
  public businessType: number;
  public classId: number;
  public companyId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate: Date;
  public bstPolicyTypesInsurers: Array<BstPolicyTypesInsurers> = [];

}

export class BstPolicyTypesInsurers {
  public id: number;
  public partyId: number;
  public policyType: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate: Date;
}

export class BstClassesSearchCriteria {

  ClassId?: number;
  Abbreviation?: string;
  Name?: string;
  CompanyId: number;

  constructor(CompanyId: number, ClassId?: number, Abbreviation?: string, Name?: string) {
    this.CompanyId = CompanyId;
    this.ClassId = ClassId;
    this.Abbreviation = Abbreviation;
    this.Name = Name;
  }
}

export class BstAgreements {
  public id: number;
  public signDate: Date;
  public startDate: Date;
  public endDate: Date;
  public agreementNo: string;
  public collectionScheme: number;
  public attachPath: string;
  public notes: string;
  public partyId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate: Date;

}
export class BstParties {
  public id: number;
  public type: number;
  public name: string;
  public name2: string;
  public language: number;
  public uniqueNo: number;
  public businessSector: number;
  public abbreviation: string;
  public rating: number;
  public expiryDate: Date;
  public activityField: number;
  public webSite: string;
  public origin: number;
  public commEmail: number;
  public commPhone: number;
  public commSms: number;
  public commMail: number;
  public country: string;
  public city: number;
  public area: number;
  public street: string;
  public buildingNo: string;
  public district: string;
  public phoneNo: string;
  public mobileNo: string;
  public email: string;
  public faxNo: string;
  public poBox: string;
  public zipCode: string;
  public logo: string;
  public contactPerson: string;
  public contactPosition: string;
  public contactPhoneNo: string;
  public contactEmail: string;
  public preferenceDegree: number;
  public dateOfBirth: Date;
  public notes: string;
  public customerId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate: Date;

}

export class BstPartiesSearchCriteria {

  public type: number;
  public name: string;
  public activityfield: number;
  public preferencedegree: number;
  public origin: number;
  public abbreviation: string;
  constructor(Type: number, Name: string, ActivityField?: number, PreferenceDegree?: number, Origin?: number, Abbreviation?: string) {
    this.type = Type;
    this.name = Name;
    this.activityfield = ActivityField;
    this.preferencedegree = PreferenceDegree;
    this.origin = Origin;
    this.abbreviation = Abbreviation;;
  }
}
export enum Status {
  Failed = 0,
  Success = 1
}

export class CommissionTypeSearchCriteria {

  CompanyId: number;
  ClassId?: number;
  SubLOB?: number;


  constructor(CompanyId?: number, ClassId?: number, SubLOB?: number) {
    this.CompanyId = CompanyId;
    this.ClassId = ClassId;
    this.SubLOB = SubLOB;

  }
}

export class SearchBstCoverTypes {
  public classId?: number;
  public policyTypeId?: number;
  public coverTypeId?: number;
}

export class BstCoverTypes {
  public id: number;
  public classId: number;
  public name: string;
  public name2: string;
  public parentCover?: number;
  public companyId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;

  public class: BstClasses;
}

export class BstCoverPremiums {
  public id: number;
  public branch?: number;
  public classId: number;
  public policyType: number;
  public rateFraction: number;
  public minPremium?: number;
  public paremiumRate: number;
  public premiumAmount: number;
  public deductible?: number;
  public minDedAmount?: number;
  public maxDedAmount?: number;
  public fromSumInsured?: number;
  public toSumInsured?: number;
  public vehicleType?: number;
  public vehicleModel?: number;
  public vehicleBody?: number;
  public fromVehicleAge?: number;
  public toVehicleAge?: number;
  public fromDriverAge?: number;
  public toDriverAge?: number;
  public category?: number;
  public repairCondition?: number;
  public applyPremium?: number;
  public autoAdd?: number;
  public isActive?: number;
  public applyAgentComm?: number;
  public coverId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;

  public class: BstClasses;
  public policyTypeNavigation: BstPolicyTypes;
  public bstCoverParties: BstCoverParties[];
}

export class BstCoverParties {
  public id: number;
  public partyId: number;
  public coverPremiumId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;
}

//This Enum is used to stored the name that we assigned on the column called bst_pages_controls.DEPEND_ON_KEY`
Sample
'53', 'domainId', '7', 'Domains/InsurersPartiesType', '39', 'Admin', '2019-07-29 00:00:00', NULL, NULL, '301', '0'
'54', 'companyId', '3', NULL, '39', 'Admin', '2019-07-29 00:00:00', NULL, NULL, NULL, '0'

export enum Domains {

  InsurersPartiesType = 1,
  Language = 2,
  FieldOfActivity = 3,
  BusinessSector = 4,
  PreferenceDegree = 5,
  CollectionScheme = 6,
  Origin = 7,
  InsuranceClasses = 8,
  PolicyTypes = 9,
  Rating = 10,
  RateFraction = 11,
  PolicyHolder = 12,
  PaymentCycle = 13,
  CodesModule = 14,
  FeeCategory = 15,
  FeeAppliedOn = 16,
  FeeVoucherSide = 17,
  RepairCondition = 18,
  DocumentType = 19,
  SegmentationElemants = 20,
  CalculationBase = 21,
  RenwalTransactions = 22,
  DocumentStatus = 23,
  BenefitType = 24,
  SIBasis = 25,
  Gender = 26,
  MartialStatus = 27,
  SmokingIntensity = 28,
  OccupationClass = 29,
  Occupation = 30,
  IdentiyDocumentType = 31,
  InsuredStatus = 32,


}

export enum BenefitType {
  Basic = 1,
  Rider = 2
}

export enum SIBasis {
  FixedAmount = 1,
  MultipleofSalary = 2,
  DefinedSI = 3
}

export enum InsuranceClasses {

  Motor = 1,
  Property = 2,
  GeneralAccident = 3,
  MarineHull = 4,
  MarineCargo = 5,
  Engineering = 6,
  Credit = 7,
  Package = 8,
  Medical = 9,
  Life = 10


}

export enum CoreDomains {

}

export enum InsurersPartiesType {
  InsuranceCompany = 1,
  Policyholder = 2,
  Reinsurer = 3,
  TP = 4
}

export class bpdQuickPrice {
  public id: number;
  public pricingNo: number;
  public versionNo: number;
  public pricingSegment: string;
  public classId: number;
  public policyType: number;
  public effectiveDate: Date;
  public expiryDate: Date;
  public issueDate: Date;
  public currency: string;
  public ExchangeRate: number;
  public partyId: number;
  public customerType: number;
  public customerId: number;
  public customerName: string;
  public frequency: number;
  public maturityAge: number;
  public ageBasis: number;
  public insTerm: number;
  public insTermUnit: number;
  public policyTerm: number;
  public policyTermUnit: number;
  public ratingType: number;
  public isConverted: number;
  public companyId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;
  public branchId?: number;

  public class: BstClasses;
  public customer: BstParties;
  public party: BstParties;
  public policyTypeNavigation: BstPolicyTypes;
  public bpdPriceParties: BpdPriceParties[];
  // public BpdPriceInterests: BpdPriceInterests[];


}




export class QuickPriceSearchCriteria {


  ClassId?: number;
  SubLOB?: number;
  PolicyHolder?: number;
  InsurerId?: number;
  PricingNo?: string;



  constructor(ClassId?: number, SubLOB?: number, PolicyHolder?: number, InsurerId?: number, PricingNo?: string) {

    this.ClassId = ClassId;
    this.SubLOB = SubLOB;
    this.PolicyHolder = PolicyHolder;
    this.InsurerId = InsurerId;
    this.PricingNo = PricingNo;

  }

}
export class BpdDocuments {
  public id: number;
  public documentNo: number;
  public documentType: number;
  public versionNo: number;
  public branchId: number;
  public segmentCode: string;
  public classId: number;
  public policyType: number;
  public issueDate: Date;
  public effectiveDate: Date;
  public expiryDate: Date;
  public currency: string;
  public exchangeRate: number;
  public customerType: number;
  public customerId?: number;
  public partyId?: number;
  public frequency?: number;
  public maturityAge?: number;
  public ageBasis?: number;
  public insTerm?: number;
  public insTermUnit?: number;
  public policyTerm?: number;
  public policyTermUnit?: number;
  public ratingType?: number;
  public isConverted?: number;
  public companyId?: number;
  public documentId?: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate: Date;
  public premiumAmt?: number;
  public sumInsured?: number;
  public customerName: string;
  public documentStatus?: number;
  public bpdInterests: BpdInterests[];
  public bpdAttachments: BpdAttachments[];
  public bpdFees: BpdFees[];
  public bpdInstallments: BpdInstallments[];
  public bpdCovers: BpdCovers[];

}
export class BpdCovers {
  public id: number;

  sumInsured: number;
  sumInsuredLc?: number;
  premiumAmt?: number;
  premiumAmtLc?: number;
  premiumRate?: number;
  flatPremium?: number;
  applyPremium?: number;
  coverTypeId: number;
  coverPremiumId: number;

  interestId: number;
  documentId: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate: Date;
}


export class BpdDocumentSearchCriteria {
  ClassId?: number;
  SubLOB?: number;
  PolicyHolder?: number;
  InsurerId?: number;
  segmentCode?: string;

  constructor(ClassId?: number, SubLOB?: number, PolicyHolder?: number, InsurerId?: number, SegmentCode?: string) {

    this.ClassId = ClassId;
    this.SubLOB = SubLOB;
    this.PolicyHolder = PolicyHolder;
    this.InsurerId = InsurerId;
    this.segmentCode = SegmentCode;

  }
}

export class BpdAttachments {
  id: number;
  documentName: string;
  receivalDate?: Date;
  remarks: string;
  attachment: string;
  documentId: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate: Date;
}

export class BpdInstallments {
  id: number;
  dueDate: Date;
  netPremium: number;
  netPremiumLc: number;
  fees: number;
  feesLc: number;
  premium: number;
  premiumLc: number;
  commission: number;
  commissionLc: number;
  documentId: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate: Date;
  bpdFees: BpdFees[];

}

export class BpdFees {
  id: number;
  feeId: number;
  policyType?: number;
  coverId?: number;
  percent?: number;
  amount?: number;
  isManual?: number;
  documentId: number;
  installmentId: number;
  creationUser: string;
  creationDate: Date;
  document: BpdDocuments;
  fee: BpdFees;
  installment: BpdInstallments;
  modificationUser: string;
  modificationDate: Date;
}

export enum PolicyHolderType {

  Prospect = 1,
  Customer = 2,
}

export enum DocumentStatus {
  ApplyPolicyRenewal = 1,
  ApplyRenewaltoQuotation = 2,
  CompanyTermination = 3,
  ClientTermination = 4,
  ResetTermination = 5,
  CreateRenewalNotice = 6,
}

export enum DocumentType {
  QuickPricing = 1,
  Quotation = 2,
  Policy = 3,
  Renwal = 4,
}

export class CustomerSearchCriteria {
  CompanyId: number;
  Id?: number;
  BranchId?: number;
  CustomerTypeId?: number;
  IsActive?: number;
  Com_reg_id?: number;
  Name?: string;
  RoleID: number;

  constructor(CompanyId: number, RoleID: number, Name?: string) {
    this.RoleID = RoleID;
    this.CompanyId = CompanyId;
    this.Name = Name;
  }
}

export class FinancialResponse<T> {
  data: T;
  message: string;
  isError: boolean;
}

export class BstCodes {
  id: number;
  majorCode: number;
  minorCode: number;
  name: string;
  name2: string;
  moduleCode: string;
  codeId: number;
  companyId: number;
  notes: string;
  inverseCode: BstCodes[];
  code: BstCodes;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate?: Date;
}


export class CodesSearchCriteria {

  ModuleCode?: string;
  MajorCode?: number;
  Name?: string;
  CodeId: number;

  constructor(ModuleCode?: string, MajorCode?: number, Name?: string, CodeId?: number) {
    this.ModuleCode = ModuleCode;
    this.MajorCode = MajorCode;
    this.Name = Name;
    this.CodeId = CodeId;
  }
}

export class CustomerDTO {
  public custRole: number;
  public iD: number;
  public customerNo: string;
  public name: string;
  public name2: string;
  public nationalId: string
  public commercialName: string;
  public customerType: number; // Not Found in Customer
  public birthDate: Date;// Not Found in Customer
  public nationality: string;
  public category: number;// Not Found in Customer
  public cityCode: string;
  public countryCode: string;
  public areaCode: string;
  public mobile: string;
  public email: string
  public startDate: Date;
  public expiryDate: Date; // Not Found in Customer
  public blackList: number;
  public blackListReason: string;
  public onHold: number;
  public holdReason: string;
  public companyId: number;
  public branchId: number;
  public createdBy: string;
  public creationDate: Date;
  public modificationDate: Date;
  public modifiedBy: string;
  public phone: string;
  public MainAddress: string;
  public fax: string;
  public taxable: number; // not Found in Customer
  public taxPercentage: number; // not Found in Customer
  public streetName: string;
  public buildingNo: string;
  public website: string;
  public iban: object;
  public CompanyId: number;
  public cST_SUP_FLAG: number; // Not Found in Customer
  // Not Found in Customer
  //public List < int > DR_CustomerAccounts { get; set; }
  //public List < int > CR_CustomerAccounts { get; set; }
  // public ExpandoObject Extend { get; set; }
}

export class BpdPriceParties {
  public id: number;
  premiumRate: number;
  premiumAmt: number;
  isChosen: number;
  priceId: number;
  partyId: number;

  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;

  public party: BstParties;
  public price: bpdQuickPrice;
  public BpdPriceCovers: BpdPriceCovers;
}

export class BpdPriceCovers {

  public id: number;
  PremiumRate: number;
  PremiumAmt: number;
  CoverId: number;
  CoverPremiumId: number;
  PricePartyId: number;

  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;

  public Cover: BstCoverTypes;
  public CoverPremium: BstCoverPremiums;
  public PriceParty: BpdPriceParties;

}

export class BstInterestTypes {
  public id: number;
  public classId: number;
  public policyType: number;
  public name: string;
  public name2: string;
  public parentInterest: number;
  public companyId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string
  public modificationDate: Date;
}

export class BstInterestTypesSearchCriteria {
  public classId: number;
  public policyType: number;
  constructor(ClassId: number, PolicyType: number) {
    this.classId = ClassId;
    this.policyType = PolicyType;
  }
}



export enum MajorCodes {

  VehicleMake = 1,
  VehicleType = 2,
  Color = 3,
  VehicleBody = 4,
  VehicleUsage = 5,
  VehicleCategory = 6


}



export class BstFees {
  id: number;
  name: string;
  name2: string;
  category?: number;
  applyOn?: number;
  companyId?: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate?: Date;
  bstFeesTiers: BstFeesTiers[];
}

export class BstFeesTiers {
  id: number;
  feeId: number;
  classId: number;
  policyType: number;
  partyId: number;
  rangeFrom: number;
  rangeTo: number;
  percent: number;
  amount: number;
  voucherSide?: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate?: Date;
}

export class BstFeesSearchCriteria {
  public classId?: number;
  public subLOB?: number;
  public category?: number;
  public name: string;
  public insuranceCompany?: number;
  constructor(classId?: number, subLOB?: number, category?: number, name?: string, insuranceCompany?: number) {
    this.classId = classId;
    this.subLOB = subLOB;
    this.category = category;
    this.name = name;
    this.insuranceCompany = insuranceCompany;
  }
}


export class bpdPriceInterests {
  public id: number;
  public serial: number;
  public name: string;
  public sumInsured: number;
  public vehicleMake: number;
  public vehicleType: number;
  public vehicleBody: number;
  public vehicleModel: number;
  public vehicleCategory: number;
  public vehicleUsage: number;
  public plateNo: string;
  public color: number;
  public repairCondition: number;
  public seatsNo: number
  public chassisNo: string;
  public engineNo: string;
  public deductiblePer: number;
  public deductibleAmt: number;
  public countryCode: string;
  public passengersNo: number;
  public depreciationAmt: number;
  public isUpdated: number;
  public notes: string;
  public priceId: number;
  public creationUser: string;
  public creationDate: Date;
  public modificationUser: string;
  public modificationDate?: Date;

  public price: bpdQuickPrice;

}


export class BpdInterests {
  id: number;
  serial: number;
  name: String;
  sumInsured: number;
  vehicleMake: number;
  vehicleType: number;
  vehicleBody: number;
  vehicleModel: number;
  vehicleCategory: number;
  vehicleUsage: number;
  plateNo: String;
  color: number;
  repairCondition: number;
  seatsNo: number;
  chassisNo: String;
  engineNo: String;
  deductiblePer: number;
  deductibleAmt: number;
  countryCode: String;
  passengersNo: number;
  depreciationPer: number;
  notes: String;
  documentId: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate?: Date;
  BpdCovers: BpdCovers[];
}

export class BstPaymentCycles {
  id: number;
  name: String;
  name2: String;
  frequency: number;
  paymentFactor: number;
  noOfPayments: number;
  notes: String;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate?: Date;
}
export class BstSegments {
  id: number;
  Name: string;
  Name2: string;
  CamSysCode: string;
  CompanyId: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate?: Date;
}
export class BstSegmentStructures {
  id: number;
  Order: number;
  BstSegId: number;
  Name: string;
  Name2: string;
  Length: number;
  Separator: string;
  PaddingString: string;
  ElementType: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate?: Date;
}

export class SearchBpdRenewal {
  public classId: number;
  public subLOB: number;
  public companyId: number;
  public fromExpiryDate: String;
  public toExpiryDate: String;
  public insured: number;
  public policyNo: number;
  constructor(classId?: number, subLOB?: number, companyId?: number, fromExpiryDate?: String, toExpiryDate?: String,
    insured?: number, policyNo?: number) {
    this.classId = classId;
    this.subLOB = subLOB;
    this.companyId = companyId;
    this.fromExpiryDate = fromExpiryDate;
    this.toExpiryDate = toExpiryDate;
    this.insured = insured;
    this.policyNo = policyNo;
  }
}

export class BpdCategories {

  id: number;
  name: String;
  name2: String;
  documentId: number;
  creationUser: String;
  creationDate: Date;
  modificationUser: String;
  modificationDate?: Date;
  bpdBenefits: BpdBenefits[] = new Array<BpdBenefits>();
}


export class BpdBenefits {

  id: number;
  benefitType?: number;
  benefitId?: number;
  siBasis?: number;
  siAmount?: number;
  siFactor?: number;
  netRate?: number;
  grossRate?: number;
  categoryId: number;
  creationUser: String;
  creationDate?: Date;
  modificationUser: String;
  modificationDate?: Date;

}

export class BpdInsuredPersons {
  id: number;
  insuredNo: number;
  name: string;
  name2: string;
  subPolicyholder: number;
  gender: number;
  birthDate: Date;
  age: number;
  maritalStatus: number;
  smokingIntensity: number;
  employeeKey: string;
  nationalId: string;
  documentType: number;
  documentNo: string;
  categoryId: number;
  occClass: number;
  occupation: number;
  monthlyIncome: number;
  incomeCurrency: string;
  sumInsured: number;
  sumInsuredLc: number;
  effectiveDate: Date;
  expiryDate: Date;
  status: number;
  country: string;
  city: number;
  poBox: string;
  zipCode: string;
  phoneNo: string;
  mobileNo: string;
  email: string;
  address: string;
  declarations: string;
  notes: string;
  documentId: number;
  referenceType: number;
  creationUser: string;
  creationDate: Date;
  modificationUser: string;
  modificationDate: Date;
}
export class SearchBpdInsuredPersons {
  employeeKey: string;
  occClass: number;
  occupation: number;
  subPolicyhsolder: number;
  nationalId: string;
  ageFrom: number;
  ageTo: number;
  incomeCurrency: string;
  monthlyIncomeFrom: number;
  monthlyIncomeTo: number;
  sumInsuredFrom: number;
  sumInsuredTo: number;
  status: number;
  
  constructor(EmployeeKey?: string, OccClass?: number, Occupation?: number, SubPolicyholder?: number, NationalId?: string, IncomeCurrency?: string, AgeFrom?: number,
    AgeTo?: number, MonthlyIncomeFrom?: number, MonthlyIncomeTo?: number, SumInsuredFrom?: number, SumInsuredTo?: number, Status?: number) {
    this.employeeKey = EmployeeKey;
    this.employeeKey = EmployeeKey;
    this.occClass = OccClass;
    this.occupation = Occupation;
    this.subPolicyhsolder = SubPolicyholder;
    this.nationalId = NationalId;
    this.ageFrom = AgeFrom;
    this.ageTo = AgeTo;
    this.incomeCurrency = IncomeCurrency;
    this.monthlyIncomeFrom = MonthlyIncomeFrom;
    this.monthlyIncomeTo = MonthlyIncomeTo;
    this.sumInsuredFrom = SumInsuredFrom;
    this.sumInsuredTo = SumInsuredTo;
    this.status = Status;
  }
}
==============================================================================
Component 

1- base.component.ts 

(This component is used to apply the basic operation of insert / update enable / disable control in the bst-page-control table)
import { Component, OnInit, AfterContentInit } from '@angular/core';
import { Router } from '@angular/router';
import { User, Application } from '../models/data-models';
import { DynamicControlService } from '../shared/services/dynamic-control.service';
import { AuthenticationService } from '../shared/services/authentication.service';
import { BstResourcesService } from '../shared/services/bst-resources.service';


@Component({
  selector: 'eska-base-component',
  templateUrl: './base-component.component.html',
  styleUrls: ['./base-component.component.scss']
})
export class BaseComponentComponent implements OnInit, AfterContentInit {

  user: User = new User();
  public controls: any[] = [];
  resourceObject: string;

  //we have the following table
  //1-bst_resources
  //2-bst_pages_controls
  //3-bst_pages
  //4-bst_pages_parent
  //5-bst_pages_controls_params


  //UnderStand
  constructor(public dynamicControlService: DynamicControlService, public router: Router, public authenticationService: AuthenticationService,
    public bstResourcesService: BstResourcesService) {

    //When you Rotuing to any component it will read URL and take the name after / and put it as resourceObject parameter to
    //call the method calle BstResources/GetResouces (objectName (represetn the name after / ),language , companyID)
    //This Method will get all resources for the page and sub pages
    //with using async and await command with promise method
    if (this.router.url.startsWith('/'))
      this.resourceObject = this.router.url.substring(1, this.router.url.length);
    else
      this.resourceObject = this.router.url;

    this.user = this.authenticationService.getLoggedInUser();   

    this.bstResourcesService.getResources(this.resourceObject, "1" this.user.language.toString(), 1).subscribe(
      data => { this.bstResourcesService.Resources = data.data; },
      err => { console.log(err); });
  }    

  ngOnInit() {
  }

  ngAfterContentInit() {  
    
  }

  async generateControls(moduleCode: string): Promise<any[]> {

     //it will loading the pages controls to main page and sub pages controls and prevent the page loading until the data recieved
     //by using async and await command with promise method it will waiting until the data recieved from database

    //console.log('base generate Controls start:' + new Date().toLocaleTimeString());
    let getControlsByKey$ = this.dynamicControlService.generateControls(this.resourceObject, moduleCode, 1);
    await getControlsByKey$.then(
      data => {
        //console.log('base generate Controls end:' + new Date().toLocaleTimeString());
        this.controls = data;
      }
    );
    return this.controls;
  }
}

======================================================================================================================================================

2-Shared >  Controls Folder Part
 
 A-Auto Complete component
 
 <div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
         value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <p-autoComplete [formControlName]="control.key" [suggestions]="suggestions" (completeMethod)=" !control.disabled ? CompleteMethod($event) : suggestions=[];"
                  [dropdown]="true" [forceSelection]="true" field="label" dataKey="value" [required]="control.required" [readonly]="control.disabled? 'disabled' : null"
                  (onSelect)="OnSelect(control)" class="prime-form-control">
  </p-autoComplete>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>


 import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef, DoCheck, KeyValueDiffers, KeyValueDiffer } from '@angular/core';
import { BaseControlComponent } from '../base-control/base-control.component';
import { FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { ControlType } from '../../../models/data-models';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-autoComplete',
  templateUrl: './auto-complete.component.html',
  styleUrls: ['./auto-complete.component.scss']
})
export class AutoCompleteComponent extends BaseControlComponent implements OnInit {

  @Input() suggestions: any[];
  @Output() completeMethod: EventEmitter<any> = new EventEmitter<any>();

  formGroup: FormGroup;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
  }

  CompleteMethod(event) {
    if (this.control.isDynamic)
      this.dynamicControlService.fillControlOptions(this.control, this.form, event.query).then(
        data => {
          if (data.options.length > 0)
            this.suggestions = data.options;
          else
            this.suggestions = [];
        });
    else
      this.completeMethod.emit(event);
  }

  OnSelect(control) {
    if (control.isDynamic)
      control.childControls.forEach(
        child => {
          switch (child.controlType) {
            case ControlType.Dropdown:
              this.dynamicControlService.fillControlOptions(child, this.form).then(
                data => {
                  if (data != undefined || data != null) {
                    this.bindControl.emit(data);
                  }
                });
              break;
          }
        });
  }
}
     
 
======================================================
 B-Base Control Component 

import { Component, OnInit, Input, ViewChild, ElementRef, ChangeDetectorRef, HostListener, AfterViewChecked, AfterViewInit, AfterContentInit, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { User, BstResources, Application } from '../../../models/data-models';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { MenuItem } from 'primeng/api';
import { FormGroup } from '@angular/forms';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { ControlBase } from '../dynamic-search/control-classes/control-base';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';


@Component({
  selector: 'eska-base-control',
  templateUrl: './base-control.component.html',
  styleUrls: ['./base-control.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class BaseControlComponent implements OnInit, AfterViewChecked {
  items: MenuItem[] = [
    {
      label: 'Dynamic UI/UX Features',
      disabled: true,
      styleClass: 'menu-item-title'
    },
    {
      label: 'Edit label',
      command: () => { this.editLabel() }
    },
    {
      label: 'Convert to Mandatory',
      command: () => { this.convertToMandatory() }
    },
    {
      label: 'Convert to Optional',
      command: () => { this.convertToOptional() }
    },
    {
      label: 'Disable Control',
      command: () => { this.disbaleControl() }
    },
    {
      label: 'Enable Control',
      command: () => { this.enableControl() }
    },
    {
      label: 'Hide Control',
      command: () => { this.hideControl() }
    },
    {
      label: 'Show Hidden Controls',
      disabled: false,
      items: []
    }
  ];

  label: string;
  user: User = new User();
  showEditLabel: boolean = false;
  @Input() control: any;
  @ViewChild('wrapperDiv') wrapperDiv: ElementRef;
  @ViewChild('editLabelInput') editLabelInput: ElementRef;

  @Input() form: FormGroup;
  @Output() bindControl: EventEmitter<any> = new EventEmitter<any>();

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router,
    public authenticationService: AuthenticationService, public dynamicControlService: DynamicControlService,
    public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {

    this.user = this.authenticationService.getLoggedInUser();
  }

  ngOnInit() {
    this.label = this.control.labelKey;
  }

  ngAfterViewChecked() {
    if (this.showEditLabel) {
      document.getElementById('txtEditLabel').focus();
    }
  }

  editLabel() {
    this.showEditLabel = true;
  }

  updateLabel() {
    let resourceObject: string;
    if (this.router.url.startsWith('/'))
      resourceObject = this.router.url.substring(1, this.router.url.length);
    else
      resourceObject = this.router.url;

    if (this.editLabelInput != undefined) {
      let bstResource = new BstResources();
      bstResource.object = resourceObject;
      bstResource.name = this.control.labelKey;
      bstResource.value = this.editLabelInput.nativeElement.value;
      bstResource.language = this.user.language.toString();
      bstResource.companyId = this.user.companyId;

      this.bstResourcesService.getResource(bstResource.object, bstResource.name, bstResource.language, bstResource.companyId).subscribe(
        res => {
          let data = res.data;
          if (data == null) {
            bstResource.creationUser = "Admin";
            this.bstResourcesService.postResource(bstResource).subscribe(
              res => {
                let data = res.data;
                this.bstResourcesService.Resources[data.name] = data.value
              },
              err => { console.log(err); }
            )
          }
          else {
            data.value = bstResource.value;
            data.modificationUser = "Admin";
            this.bstResourcesService.updateResource(data).subscribe(
              res => {
                let data = res.data;
                this.bstResourcesService.Resources[data.name] = data.value
              },
              err => { console.log(err); }
            )
          }
        },
        err => {
          console.log(err);
        });

      this.showEditLabel = false;
    }
  }

  onFocusout(event) {
    this.showEditLabel = false;
  }

  hideControl() {
    this.bstPagesControlsService.GetById(this.control.id, this.user.companyId).subscribe(
      res => {
        let ctrl = res.data
        if (ctrl != undefined) {
          ctrl.isHidden = 1;
          ctrl.modificationUser = this.user.userName;
          this.bstPagesControlsService.Update(ctrl).subscribe(
            ctrl => {
              this.control.hidden = true;
            },
            err => { console.log(err); }
          )
        }
      },
      err => { console.log(err); }
    )
  }

  showHiddenControl(control: ControlBase<any>) {
    this.bstPagesControlsService.GetById(control.id, this.user.companyId).subscribe(
      res => {
        let ctrl = res.data
        if (ctrl != undefined) {
          ctrl.isHidden = 0;
          ctrl.modificationUser = this.user.userName;
          this.bstPagesControlsService.Update(ctrl).subscribe(
            ctrl => {
              this.dynamicControlService.controls.filter(c => c.key == control.key && c.form === control.form)[0].hidden = false;
            },
            err => { console.log(err); }
          )
        }
      },
      err => { console.log(err); }
    )
  }

  convertToMandatory() {
    this.bstPagesControlsService.GetById(this.control.id, this.user.companyId).subscribe(
      res => {
        let ctrl = res.data
        if (ctrl != undefined) {
          ctrl.isRequired = 1;
          ctrl.modificationUser = this.user.userName;
          this.bstPagesControlsService.Update(ctrl).subscribe(
            ctrl => {
              this.control.required = true;
              this.form.updateValueAndValidity();
              this.cdRef.detectChanges();
            },
            err => { console.log(err); }
          )
        }
      },
      err => { console.log(err); }
    )
  }

  convertToOptional() {
    this.bstPagesControlsService.GetById(this.control.id, this.user.companyId).subscribe(
      res => {
        let ctrl = res.data
        if (ctrl != undefined) {
          ctrl.isRequired = 0;
          ctrl.modificationUser = this.user.userName;
          this.bstPagesControlsService.Update(ctrl).subscribe(
            ctrl => {
              this.control.required = false;
              this.form.updateValueAndValidity();
              this.cdRef.detectChanges();
            },
            err => { console.log(err); }
          )
        }
      },
      err => { console.log(err); }
    )
  }

  enableControl() {
    this.bstPagesControlsService.GetById(this.control.id, this.user.companyId).subscribe(
      res => {
        let ctrl = res.data
        if (ctrl != undefined) {
          ctrl.isDisabled = 0;
          ctrl.modificationUser = this.user.userName;
          this.bstPagesControlsService.Update(ctrl).subscribe(
            ctrl => {
              this.control.disabled = false;
            },
            err => { console.log(err); }
          )
        }
      },
      err => { console.log(err); }
    )
  }

  disbaleControl() {
    this.bstPagesControlsService.GetById(this.control.id, this.user.companyId).subscribe(
      res => {
        let ctrl = res.data
        if (ctrl != undefined) {
          ctrl.isDisabled = 1;
          ctrl.modificationUser = this.user.userName;
          this.bstPagesControlsService.Update(ctrl).subscribe(
            ctrl => {
              this.control.disabled = true;
            },
            err => { console.log(err); }
          );
        }
      },
      err => { console.log(err); }
    )
  }

  onContextMenu(e) {
    var contextMenus = document.getElementsByTagName('p-contextmenu') as HTMLCollectionOf<HTMLElement>;
    for (var i = 0; i < contextMenus.length; i++) {
      if (!this.wrapperDiv.nativeElement.parentElement.contains(contextMenus[i]))
        contextMenus[i].style.display = "none";
      else
        contextMenus[i].style.display = "block";
    }

    this.rebuildContextMenuItems();
  }

  rebuildContextMenuItems() {
    if (!this.control.allowEditLabel) {
      this.items.find(item => item.label === 'Edit label').disabled = true;
    }

    if (!this.control.allowRequired) {
      this.items.find(item => item.label === 'Convert to Mandatory').disabled = true;
      this.items.find(item => item.label === 'Convert to Optional').disabled = true;
    }

    if (!this.control.allowHidden) {
      this.items.find(item => item.label === 'Hide Control').disabled = true;
    }

    if (!this.control.allowDisabled) {
      this.items.find(item => item.label === 'Disable Control').disabled = true;
      this.items.find(item => item.label === 'Enable Control').disabled = true;
    }

    if (this.control.required) {
      this.items.find(item => item.label === 'Convert to Mandatory').visible = false;
      this.items.find(item => item.label === 'Convert to Optional').visible = true;
    }
    else {
      this.items.find(item => item.label === 'Convert to Mandatory').visible = true;
      this.items.find(item => item.label === 'Convert to Optional').visible = false;
    }

    if (this.control.disabled) {
      this.items.find(item => item.label === 'Disable Control').visible = false;
      this.items.find(item => item.label === 'Enable Control').visible = true;
    }
    else {
      this.items.find(item => item.label === 'Disable Control').visible = true;
      this.items.find(item => item.label === 'Enable Control').visible = false;
    }

    let hiddenControls: MenuItem[] = [];
    this.dynamicControlService.controls.forEach(ctrl => {
      if (ctrl.hidden === true && ctrl.form === this.control.form) {
        if (ctrl.allowHidden == true)
          hiddenControls.push({ label: this.translatePipe.transform(ctrl.labelKey), command: cmd => this.showHiddenControl(ctrl) });
        else
          hiddenControls.push({ label: this.translatePipe.transform(ctrl.labelKey), disabled: true, command: cmd => this.showHiddenControl(ctrl) });
      }
    });

    if (hiddenControls.length === 0) {
      this.items.find(item => item.label === 'Show Hidden Controls').items = undefined;
      this.items.find(item => item.label === 'Show Hidden Controls').disabled = true;
    }
    else {
      this.items.find(item => item.label === 'Show Hidden Controls').items = hiddenControls;
      this.items.find(item => item.label === 'Show Hidden Controls').disabled = false;
    }
  }

  @HostListener("keypress", ["$event"]) onEnterKeypress(e: KeyboardEvent) {
    if (e.keyCode === 13) // enter key
      this.updateLabel();
  }
}

======================================================
C-Calender Component

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel" for="float-input">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
         value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <p-calendar [dateFormat]="calenderDateFormat" [formControlName]="control.key" [required]="control.required"
              [disabled]="control.disabled || disabled ? 'disabled' : null" showIcon="true"
              [minDate]="minDate" [maxDate]="maxDate" class="prime-form-control"
              (onSelect)="onSelect($event)"></p-calendar>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>


import { Component, OnInit, ChangeDetectorRef, Input, Output, EventEmitter} from '@angular/core';
import { FormGroup } from '@angular/forms';
import { environment } from 'src/environments/environment';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { BaseControlComponent } from '../base-control/base-control.component';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';
import { BstResourcesService } from '../../services/bst-resources.service';

@Component({
  selector: 'eska-calendar',
  templateUrl: './calendar.component.html',
  styleUrls: ['./calendar.component.scss']
})
export class CalendarComponent extends BaseControlComponent implements OnInit {
  @Input() minDate: Date;
  @Input() maxDate: Date;
  @Input() disabled: boolean = false;
  @Output() OnSelect  = new EventEmitter<any>();
  formGroup: FormGroup;
  calenderDateFormat: string = environment.DATE_FMT;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
  }

  onSelect(event: any) {
    debugger;
    this.OnSelect.emit(event);
  }
}

======================================================
D-CheckBox Component

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <div class="checkbox checkbox-css">
    <input type="checkbox" [id]="control.key" [formControlName]="control.key" [required]="control.required"
           [attr.disabled]="control.disabled? 'disabled' : null" (change)="OnChange($event)">

    <label *ngIf="!showEditLabel" [attr.for]="control.key">{{ control.labelKey | translate }}</label>
    <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
           value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />
  </div>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>


import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { FormGroup } from '@angular/forms';
import { BaseControlComponent } from '../base-control/base-control.component';
import { ControlType } from '../../../models/data-models';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-checkbox',
  templateUrl: './checkbox.component.html',
  styleUrls: ['./checkbox.component.scss']
})
export class CheckboxComponent extends BaseControlComponent implements OnInit {

  formGroup: FormGroup;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
  }

  OnChange(event) {
    if (this.control.isDynamic)
      this.control.childControls.forEach(
        child => {
          switch (child.controlType) {
            case ControlType.Dropdown:
              this.dynamicControlService.fillControlOptions(child, this.form).then(
                data => {
                  if (data != undefined || data != null) {
                    this.bindControl.emit(data);
                  }
                });
              break;
          }
        });
  }
}

======================================================
 E-Currency Component

<div class="row">
    <div *ngIf="currencyControl as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
        <eska-dropdown [control]="control" [form]="form" [options]="currencyList"></eska-dropdown>
    </div>
    <div *ngIf="exrateControl as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
        <eska-textbox [control]="control" [form]="form" [type]="'text'" [numberType]="NumberTypes.Decimal"></eska-textbox>
    </div>
</div>

<!--<p> currencyFormValue : {{ currencyForm.value | json}}</p>-->



import { Component, OnInit, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { SelectItem } from 'primeng/api';
import { NumberTypes } from 'src/app/models/data-models';
import { FinancialService } from '../../services/financial.service';
import { CoreService } from '../../services/core.service';

@Component({
  selector: 'eska-currency',
  templateUrl: './currency.component.html',
  styleUrls: ['./currency.component.scss']
})
export class CurrencyComponent implements OnInit {

  @Input() currencyControl: any;
  @Input() exrateControl: any;
  @Input() form: FormGroup;
  currencyList: SelectItem[];

  get NumberTypes() { return NumberTypes }

  constructor(private coreService: CoreService, private financialService: FinancialService) { }

  ngOnInit() {
    if (!this.currencyControl.isDynamic)
      this.fillCurrencyDropDown()


    this.form.controls[this.currencyControl.key].valueChanges.subscribe(
      val => {
        if (val != "" && val != undefined && val != null) {
          this.financialService.getExrate(val).subscribe(data => {
            data => {
              this.form.controls[this.exrateControl.key].setValue(data);
            }
          });
        }
        else
          this.form.controls[this.exrateControl.key].reset();
      }
    );
  }

  fillCurrencyDropDown() {
    this.coreService.getCurrencies().subscribe(
      data => this.currencyList = data,
      err => console.log(err)
    );
  }
}
======================================================
F-Datatable Component

<p-table #dt [columns]="cols" [value]="rows" selectionMode="multiple" (onRowSelect)="onRowSelected($event)"
  (onRowUnselect)="onRowUnSelected($event)" (onHeaderCheckboxToggle)="onHeaderCheckboxToggle($event)" [paginator]="true"
  [rows]="rowsPerPage" [rowsPerPageOptions]="rowsPerPageOptions" [alwaysShowPaginator]="true" [(selection)]="selectedRows"
  [dataKey]="dataKey" [rowHover]="mouseHover" [style]="style">

  <ng-template pTemplate="caption" *ngIf="showFilter">
    <div style="text-align: right">
      <i class="fa fa-search" style="margin:4px 4px 0 0"></i>
      <input type="text" pInputText size="50" placeholder="Global Filter" (input)="dt.filterGlobal($event.target.value, 'contains')"
        style="width:auto">
    </div>
  </ng-template>
  <ng-template pTemplate="header" let-columns>
    <tr>
      <th *ngIf="showCheckBox" style="width: 3em; text-align: left">
        <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
      </th>
      <th *ngFor="let col of cols" [pSortableColumn]="col.field" [ngStyle]="{'display' : col.hidden ? 'none' : 'table-cell'}">
        {{col.header}}
        <p-sortIcon *ngIf="enableSorting" [field]="col.field" ariaLabel="Activate to sort" ariaLabelDesc="Activate to sort in descending order"
          ariaLabelAsc="Activate to sort in ascending order"></p-sortIcon>
      </th>
      <th *ngIf="showSelectionColumn" style="width: 3em">
      </th>
    </tr>
  </ng-template>
  <ng-template let-rowData let-columns="cols" let-rowIndex="rowIndex" pTemplate="body">
    <tr>
      <td *ngIf="showCheckBox" style="width: 3em; text-align: left">
        <p-tableCheckbox [value]="rowData" [index]="rowIndex" (click)="onCheckboxChange($event)"></p-tableCheckbox>
      </td>
      <td *ngFor="let col of cols" [pSelectableRow]="rowData" [ngStyle]="{'display' : col.hidden ? 'none' : 'table-cell'}">
        <span *ngIf="col.editable" pEditableColumn style="width:100%">
          <p-cellEditor>
            <ng-template pTemplate="input">
              <input type="text" [(ngModel)]="rowData[col.field]" style="width:100%">
            </ng-template>
            <ng-template pTemplate="output">
              {{rowData[col.field]}}
            </ng-template>
          </p-cellEditor>
        </span>
        <span *ngIf="!col.editable  && !col.isIcon" style="width:100%">
          {{rowData[col.field]}}
        </span>
        <span *ngIf="col.showStatusIcon">
          <ng-template let-col let-item="rowData" pTemplate="expander">
            <span *ngIf="item[col.field]" class="fa fa-check"></span>
            <span *ngIf="!item[col.field]" class="fa fa-close"></span>
          </ng-template>
        </span>
        <span *ngIf="col.dateColumn">
          <ng-template let-item="rowData" pTemplate="expander">
            {{rowData[col.field] | date:dateFormat }}
          </ng-template>
        </span>
        <span *ngIf="col.percentColumn">
          <ng-template let-item="rowData" pTemplate="body">
            {{rowData[col.field] | numeric:percentNumberType:percentFormat }}
          </ng-template>
        </span>
        <span *ngIf="col.commandCol">
          <a style="color: #3c8dbc" (click)="onLinkSelected(rowData, col, colIndex)">
            {{[col.commandName]}}
          </a>
        </span>
        <span *ngIf="col.btnCommandCol">
          <a href="javascript:;" title="Delete"><i (click)="onLinkSelected(rowData, col, colIndex)" [ngClass]="rowData[col.icon]"></i></a>
        </span>
        <span *ngIf="col.editablePercentCol">
          <p-cellEditor>
            <ng-template let-item="rowData" pTemplate="input">
              <input type="text" class="form-control" [required]="col.requiredCol" name="model" #model="ngModel"
                     [(ngModel)]="item[col.field]" eskaNumeric numberType="3" minDecimalPoint="2" maxDecimalPoint="2"
                     allowNegative="false" />
              <span *ngIf="col.requiredCol" class="ng-validation-icon"></span>
            </ng-template>
            <ng-template let-item="rowData" pTemplate="output">
              {{rowData[col.field] | numeric:percentNumberType:percentFormat }}
            </ng-template>
          </p-cellEditor>
        </span>
        <span *ngIf="col.editableDateCol">
          <p-cellEditor>
            <ng-template let-item="rowData" pTemplate="input">
              <p-calendar showIcon="true" DateFormat [dateFormat]="calenderDateFormat" class="form-control-ng"
                          [required]="col.requiredCol" [(ngModel)]="item[col.field]"></p-calendar>
            </ng-template>
            <ng-template let-item="rowData" pTemplate="output">
              {{rowData[col.field] | date:dateFormat }}
            </ng-template>
          </p-cellEditor>
        </span>
        <span *ngIf='col.type=="checkbox"'>
          <p-cellEditor>
            <ng-template let-item="rowData" pTemplate="input">
              <input type="checkbox" class="prime-checkbox" name="group1" [checked]="item[col.field]" (change)="RowCheckboxSelected(item['Id'],col.field,$event.target.checked)"
                     inputId="ny" [disabled]="col.disable">
            </ng-template>
          </p-cellEditor>
        </span>
        <span *ngIf='col.type=="input-dropdown"'>
          <p-cellEditor>
            <ng-template let-item="rowData" pTemplate="input">
              <p-dropdown [options]="item[col.option]" [required]="col.required" [(ngModel)]="item[col.field]" name="CycleUnit"
                          [style]="{'width':'100%'}"></p-dropdown>
            </ng-template>
            <ng-template let-item="rowData" pTemplate="output">
              {{rowData[col.field]}}
            </ng-template>
          </p-cellEditor>
        </span>

        <span *ngIf="col.isIcon">
          <i *ngIf="rowData[col.field]" [class]="col.icon"  tooltipPosition="bottom" (click)="onLinkSelected(rowData, col, colIndex)" data-toggle="modal" data-target=".policyholder-modal"></i>
          <i *ngIf="!rowData[col.field]" [class]="col.icon2"  tooltipPosition="bottom" (click)="onLinkSelected(rowData, col, colIndex)" data-toggle="modal" data-target=".policyholder-modal"></i>
        </span>
      </td>
      <td *ngIf="showSelectionColumn" style="width: 3em">
        <button class="btn btn-primary btn-xs" type="button" pbutton (click)="rowSelect(rowData)" data-dismiss="modal">
          <span class="far fa-sm fa-edit"></span>
        </button>
      </td>

      <td *ngIf="showActionColumn" header="Action">
        <ng-template let-item="rowData" pTemplate="expander">
          <i class="fa fa-eye fa-2x" pTooltip="Preview" tooltipPosition="bottom" (click)="Preview()"> </i>
          &nbsp;
          <i class="fa fa-plus-square-o fa-2x" pTooltip="Configure" tooltipPosition="bottom" (click)="Configure()"> </i>
          &nbsp; &nbsp;
          <i class="fa fa-files-o fa-2x" pTooltip="Copy" tooltipPosition="bottom" (click)="Copy($event)"> </i>
        </ng-template>
      </td>
    </tr>
  </ng-template>
</p-table>




import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { Message } from "primeng/primeng";
import { environment } from 'src/environments/environment';
import { NumberTypes } from 'src/app/models/data-models';


@Component({
  selector: 'eska-datatable',
  templateUrl: './datatable.component.html',
  styleUrls: ['./datatable.component.scss']
})
export class DatatableComponent implements OnInit {

  form: FormGroup;
  tableData: Array<any>;

  @Input() rows: any[];

  @Input() cols: any[];

  @Input() dataKey: string = "id";

  @Input() title: string = "list";

  @Input() style: string;

  @Input() selectedRows: any[];

  @Input() mouseHover: boolean;

  @Input() showCheckBox: boolean;

  @Input() showSelectionColumn: boolean;

  @Input() showActionColumn: boolean = false;

  @Input() showPreviewButton: boolean = false;

  @Input() showConfigureButton: boolean = false;

  @Input() showCopyButton: boolean = false;

  @Input() showFilter: boolean = false;
  @Input() enableSorting: boolean = false;

  @Input() rowsPerPage: number = 5;

  @Input() rowsPerPageOptions: number[] = [5,10,15,20];

  @Output() OnRowSelected = new EventEmitter<any>();

  @Output() OnRowUnSelected = new EventEmitter<any>();

  @Output() OnCheckboxSelected: EventEmitter<any> = new EventEmitter<any>();

  @Output() OnCheckboxUnSelected: EventEmitter<any> = new EventEmitter<any>();

  @Output() OnLinkSelected = new EventEmitter<any>();

  @Output() OnRowcheckboxSelected = new EventEmitter<any>();

  @Output() OnPreview = new EventEmitter<any>();

  @Output() OnCopy = new EventEmitter<any>();

  @Output() OnConfigure = new EventEmitter<any>();

  rowsClonned = [];

  dateFormat = environment.DATE_FMT;

  percentFormat = "1.2-2";
  percentNumberType = NumberTypes.Percentage;

  msgs: Message[] = [];


  onRowUnSelected(event: any) {

     if (event.type == "row")
       this.OnRowUnSelected.emit(event.data);
     
     else if (event.type == "checkbox") {
       this.OnCheckboxUnSelected.emit(event.data);
     }
  }

  onRowSelected(event: any) {
    if (event.type == "row")
      this.OnRowSelected.emit(event.data); 
    else if (event.type == "checkbox") {
      this.OnCheckboxSelected.emit(event.data);
    }
  }

  onCheckboxChange(event: any[]) {
    //this.OnCheckboxSelected.emit(this.selectedRows);
  }

  rowSelect(event: any) {
    this.OnRowSelected.emit(event);
  }

  onHeaderCheckboxToggle(event: any[]) {
    //this.OnCheckboxSelected.emit(this.selectedRows);
  }



  onLinkSelected(item: any, col: string, colIndex: number) {
    let commandEventArg = new CommandEventArg(item, col, colIndex);
    this.OnLinkSelected.emit(commandEventArg);
  }

  RowCheckboxSelected(name: any, val: any) {
    let checkboxreturn = { field: name, value: val.checked }
    this.OnRowcheckboxSelected.emit(checkboxreturn);
  }

  Copy(event: any[]) {
    this.OnCopy.emit(this.selectedRows);

  }


  Configure() {
    this.OnConfigure.emit();
  }


  Preview() {
    this.OnPreview.emit();
  }

  formatDate(date: Date) {
    return 'reema';
  }
  constructor() {

  }
  ngOnInit() {


  }
}

export class CommandEventArg {
  commandRow: any;
  commandCol: string;
  commandIndex: number;
  constructor(Row: any, Col: string, Index: number) {
    this.commandRow = Row;
    this.commandCol = Col;
    this.commandIndex = Index;
  }
}

======================================================
G-Dropdown  Component

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel" for="float-input">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
         value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <p-dropdown [options]="control.isDynamic? control.options : options" [required]="control.required" [disabled]="control.disabled? 'disabled' : null"
              [formControlName]="control.key" (onChange)="BindControl(control)" class="prime-form-control" [filter]="filter">
  </p-dropdown>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>



import { Component, OnInit, Input, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { BaseControlComponent } from '../base-control/base-control.component';
import { SelectItem } from 'primeng/api';
import { ControlType } from '../../../models/data-models';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-dropdown',
  templateUrl: './dropdown.component.html',
  styleUrls: ['./dropdown.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class DropdownComponent extends BaseControlComponent implements OnInit {

  formGroup: FormGroup;
  @Input() options: SelectItem[] = [];
  @Input() filter: boolean = true;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);

  }

  ngOnInit() {
    this.formGroup = this.form;
    if (this.control.isDynamic)
  
      this.dynamicControlService.fillControlOptions(this.control, this.form).then(
        data => {
          this.control.options = data.options
        });
  }

  BindControl(control) {
    if (control.isDynamic)
      control.childControls.forEach(
        child => {
          switch (child.controlType) {
            case ControlType.Dropdown:
              this.dynamicControlService.fillControlOptions(child, this.form).then(
                data => {
                  if (data != undefined || data != null) {
                    this.bindControl.emit(data);
                  }
                });
              break;
          }
        });
  }
}

======================================================

H-Dynamic Search 

1-control-classes

A-control-autocomplete

import { ControlBase } from "./control-base";
import { BstPagesControlsParams, ParamsType } from "../../../../models/data-models";

export class ControlAutocomplete extends ControlBase<string> {
  controlType = 'autoComplete';
  options: { label: string, value: string }[] = [];
  serviceUrl: string;
  controlParams: BstPagesControlsParams[] = [];
  paramsType: number;

  constructor(options: {} = {}) {
    super(options);
    this.options = options['options'] || [];
    this.serviceUrl = options['serviceUrl'] || '';
    this.controlParams = options['controlParams'] || [];
    this.paramsType = options['paramsType'] || ParamsType.PathParameter;
  }
}
==================================
B-Control-Base 

export class ControlBase<T> {
  id: number;
  value: T;
  key: string;
  form: string;
  labelKey: string;
  allowEditLabel?: boolean;
  required: boolean;
  allowRequired: boolean;
  hidden?: boolean;
  allowHidden?: boolean;
  disabled?: boolean;
  allowDisabled?: boolean;
  order: number;
  controlType?: string;
  className: string;
  childControls?: ControlBase<T>[];
  isDynamic?: boolean;
  formType: number;
  
  constructor(options: {
    id?:number,
    value?: T,
    key?: string,
    form?: string,
    labelKey?: string,
    allowEditLabel?: boolean,
    required?: boolean,
    allowRequired?: boolean,
    hidden?: boolean,
    allowHidden?: boolean,
    disabled?: boolean,
    allowDisabled?: boolean,
    order?: number,
    controlType?: string,
    className?: string,
    childControls?: ControlBase<T>[],
    isDynamic?: boolean,
    formType?: number
  } = {}) {
    this.id = options.id;
    this.value = options.value;
    this.key = options.key || '';
    this.form = options.form;
    this.labelKey = options.labelKey || '';
    this.allowEditLabel = !!options.allowEditLabel;
    this.required = !!options.required;
    this.allowRequired= !!options.allowRequired;
    this.hidden = !!options.hidden;
    this.allowHidden = !!options.allowHidden;
    this.disabled = !!options.disabled;
    this.allowDisabled = !!options.allowDisabled;
    this.order = options.order === undefined ? 1 : options.order;
    this.controlType = options.controlType || '';
    this.className = options.className || '';
    this.childControls = options.childControls || [];
    this.isDynamic = !!options.isDynamic;
    this.formType = options.formType;
  }
}
==================================
C-Control-Calender 

import { ControlBase } from "./control-base";

export class ControlCalendar extends ControlBase<string> {
  controlType = 'calendar';

  constructor(options: {} = {}) {
    super(options);
  }
}
=================================
D-Control-Checkbox

import { ControlBase } from "./control-base";

export class ControlCheckbox extends ControlBase<string> {
  controlType = 'checkbox'; 

  constructor(options: {} = {}) {
    super(options);
  }
}
================================
E-Control-Dropdown

import { ControlBase } from "./control-base";
import { BstPagesControlsParams, ParamsType } from "../../../../models/data-models";

export class ControlDropdown extends ControlBase<string> {
  controlType = 'dropdown';
  options: { label?: string, value: string }[] = [];
  serviceUrl: string;
  controlParams: BstPagesControlsParams[] = [];
  paramsType: number;

  constructor(options: {} = {}) {
    super(options);
    this.options = options['options'] || [];
    this.serviceUrl = options['serviceUrl'] || '';
    this.controlParams = options['controlParams'] || [];
    this.paramsType = options['paramsType'] || ParamsType.PathParameter;
  }
}
================================
F-Control-radioButton


import { ControlBase } from "./control-base";
import { BstPagesControlsParams, ParamsType } from "../../../../models/data-models";

export class ControlRadioButton extends ControlBase<string> {
  controlType = 'radiobutton';
  options: { label?: string, value: string }[] = [];
  serviceUrl: string;
  controlParams: BstPagesControlsParams[] = [];
  paramsType: number;

  constructor(options: {} = {}) {
    super(options);
    this.options = options['options'] || [];
    this.serviceUrl = options['serviceUrl'] || '';
    this.controlParams = options['controlParams'] || [];
    this.paramsType = options['paramsType'] || ParamsType.PathParameter;
  }
}
================================
G-Control-TextBox

import { ControlBase } from "./control-base";

export class ControlTextbox extends ControlBase<string> {
  controlType = 'textbox';
  type: string;

  constructor(options: {} = {}) {
    super(options);
    this.type = options['type'] || '';
  }
}
================================


Dynamic Control component 

<div [ngSwitch]="control.controlType">

  <eska-textbox *ngSwitchCase="'textbox'" [control]="control" [form]="form"></eska-textbox>
  <span *ngSwitchCase="'textbox'" class="ng-validation-icon"></span>

  <eska-dropdown *ngSwitchCase="'dropdown'" [control]="control" [form]="form" (bindControl)="BindControl(control)"></eska-dropdown>

  <eska-autoComplete *ngSwitchCase="'autoComplete'" [control]="control" [form]="form" (bindControl)="BindControl(control)"></eska-autoComplete>

  <eska-calendar *ngSwitchCase="'calendar'" [control]="control" [form]="form"></eska-calendar>

  <eska-radio-button *ngSwitchCase="'radiobutton'" [control]="control" [form]="form" (bindControl)="BindControl(control)"></eska-radio-button>

  <eska-checkbox *ngSwitchCase="'checkbox'" [control]="control" [form]="form" (bindControl)="BindControl(control)"></eska-checkbox>

</div>



import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { SelectItem } from 'primeng/api';
import { NumberTypes } from '../../../models/data-models';

@Component({
  selector: 'eska-dynamic-control',
  templateUrl: './dynamic-control.component.html'
})
export class DynamicControlComponent implements OnInit {

  @Input() control: any;
  @Input() form: FormGroup;
  @Input() Suggestions: SelectItem[];
  @Output() bindControl: EventEmitter<any> = new EventEmitter<any>();
  get isValid() { return this.form.controls[this.control.key].valid; }

  constructor() {
  }

  ngOnInit() {
  }

  BindControl(control) {
    this.bindControl.emit(control);
  }
}
====================================================
Dynamic Search component 

<div *ngIf="ViewMode == Mode.Block">
  <div class="row">
    <div class="col-lg-12">
      <form id="modalForm" (ngSubmit)="onSubmit()" [formGroup]="form">
        <div class="panel panel-inverse">
          <div class="panel-heading">
            <div class="panel-heading-btn">
              <a href="javascript:;" (click)="resetForm()" class="btn btn-xs btn-icon btn-circle btn-success" title="Refresh">
                <i class="fa fa-redo"></i>
              </a>
              <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse" title="Expand/Collapse">
                <i class="fa fa-minus"></i>
              </a>
            </div>
            <h4 class="panel-title">{{dialogTitle}}</h4>
          </div>
          <div class="panel-body">
            <div class="row">
              <div *ngFor="let control of controls" [ngClass]="control.className" [ngStyle]="{'display': control.hidden ? 'none' : 'block'}">
                <eska-dynamic-control [control]="control" [form]="form" (emitSuggest)="GetSuggestVal($event)"
                                      (bindControl)="BindControl(control)"></eska-dynamic-control>
              </div>
            </div>
          </div>
          <div class="panel-footer text-right">
            <button class="btn btn-primary btn-xs" type="submit" [disabled]="!form.valid">Search</button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <div class="row" *ngIf=ShowDatatable>
    <div class="col-lg-12">
      <div class="panel panel-inverse">
        <div class="panel-heading">
          <div class="panel-heading-btn">
            <a href="javascript:;" (click)="ResetEntryForm($event)" class="btn btn-xs btn-icon btn-circle btn-success" title="Add">
              <i class="fa fa-file"></i>
            </a>
            <a href="javascript:;" *ngIf="enableExportToExcel" (click)="exportAsXLSX()" class="btn btn-xs btn-icon btn-circle btn-success" title="Export To Excel">
              <i class="fa fa-file-excel" aria-hidden="true"></i>
            </a>
            <a href="javascript:;" (click)="RemoveRecords($event)" class="btn btn-xs btn-icon btn-circle btn-danger" title="Delete"
               data-click="panel-remove"><i class="fa fa-trash"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse" title="Expand/Collapse">
              <i class="fa fa-minus"></i>
            </a>
          </div>
          <h4 class="panel-title">{{resultTitle}}</h4>
        </div>
        <eska-datatable [showCheckBox]="showCheckBox" [cols]="cols" [rows]="rows" [selectedRows]="selectedRows" [showSelectionColumn]="showSelectionColumn" [title]="gridHeader"
                        (OnRowSelected)="OnSelectedRow($event)" (OnRowUnSelected)="OnUnSelectedRow($event)"
                        (OnCheckboxSelected)="OnCheckBoxSelect($event)" (OnCheckboxUnSelected)="OnCheckboxUnSelect($event)"></eska-datatable>
      </div>
    </div>
  </div>
</div>

<div *ngIf="ViewMode == Mode.Dialog" >
  <div *ngIf="show" class="modal fade search-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h4 class="modal-title" id="modalLabel">{{dialogTitle}}</h4>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close" (click)="HideSearchPanel()">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="modalForm" (ngSubmit)="onSubmit()" [formGroup]="form">
            <div class="row">
              <div class="col-md-12 form-group">
                <div class="box box-blue box-solid">
                  <div class="box-header with-border">
                    <h3 class="box-title"><span>{{searchTitle}}</span></h3>
                    <div class="box-tools pull-right">
                      <a class="btn btn-box-tool" href="javascript:void(0);" (click)="resetForm()">
                        <i class="fa fa-plus-square" aria-hidden="true"></i>
                      </a>
                    </div>
                  </div>
                  <div class="box-body">
                    <div class="row form-row" dragula="sortable">
                      <div *ngFor="let control of controls" [ngClass]="control.className" [ngStyle]="{'display': control.hidden ? 'none' : 'block'}">
                        <eska-dynamic-control [control]="control" [form]="form" (emitSuggest)="GetSuggestVal($event)"
                                              (bindControl)="BindControl(control)"></eska-dynamic-control>
                      </div>
                    </div>
                  </div>
                  <div class="box-footer">
                    <div class="form-row">
                      <button class="btn btn-primary btn-xs" style="float: right;" type="submit" [disabled]="!form.valid">Search</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>


            <div class="row">
              <div class="col-md-12">
                <div class="box box-blue box-solid">
                  <div class="box-header with-border">
                    <h3 class="box-title">
                      <span>{{resultTitle}}</span>
                    </h3>
                    <div class="box-tools pull-right">
                      <button type="button" class="btn btn-box-tool" (click)="IncreaseDecrease(tdInstallments,30);"><i class="fa fa-plus-square-o"></i></button>
                      <button type="button" class="btn btn-box-tool" (click)="IncreaseDecrease(tdInstallments,-30);"><i class="fa fa-minus-square-o"></i></button>
                      <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                    </div>
                  </div>
                  <div class="box-body">
                    <div class="dataTables_wrapper">
                      <div class="row">
                        <div class="col-sm-12 table-responsive">
                          <div id="tdInstallments">
                            <eska-datatable [showCheckBox]="showCheckBox" [showSelectionColumn]="showSelectionColumn" [title]="gridHeader"
                                            (OnSelectedRow)="OnSelectedRow($event)" [cols]="cols" [rows]="rows"></eska-datatable>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="box-footer">
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

</div>



import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { CommonService } from '../../services/common.service';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { FormGroup } from '@angular/forms';
import { ControlType, ViewMode } from '../../../models/data-models';

@Component({
  selector: 'eska-dynamic-search',
  templateUrl: './dynamic-search.component.html'
})
export class DynamicSearchComponent implements OnInit {

  constructor(private cs: CommonService, private dcs: DynamicControlService, private cdRef: ChangeDetectorRef) {
  }

  @Input() dialogTitle: string = "";
  @Input() searchTitle: string = "";
  @Input() resultTitle: string = "";
  @Input() controls: any[] = [];
  @Input() form: FormGroup;
  @Output() emitSuggest = new EventEmitter<any>();

  @Input() rows: any[];
  @Input() cols: any[];
  @Input() show: boolean = true;
  @Input() showCheckBox: boolean = false;
  @Input() mouseHover: boolean = false;
  @Input() selectedRows: any[];
  @Input() showSelectionColumn: boolean = true;
  @Output() onSearch = new EventEmitter<any[]>();
  @Output() onSelectedRow = new EventEmitter<any>();
  @Output() onCheckBoxSelect = new EventEmitter<any>();
  @Output() onCheckboxUnSelect = new EventEmitter<any>();
  @Output() onRowUnSelected = new EventEmitter<any>();
  @Input() ViewMode: number;

  @Input() enableExportToExcel: boolean = false;


  @Output() ResetEntryClick = new EventEmitter<any>();

  @Output() RemoveRecordsClick = new EventEmitter<any>();

  get Mode() { return ViewMode; }

  @Input() ShowDatatable: boolean = true;

  onSubmit() {
    this.onSearch.emit(this.form.value);
  }

  ngOnInit() {
  }

  OnSelectedRow(selectedRow: any) {
    this.onSelectedRow.emit(selectedRow);
  }

  OnUnSelectedRow(selectedRow: any) {
    this.onRowUnSelected.emit(selectedRow);
  }

  OnCheckBoxSelect(selectedRow: any) {
    this.onCheckBoxSelect.emit(selectedRow);
  }

  OnCheckboxUnSelect(selectedRow: any) {
    this.onCheckboxUnSelect.emit(selectedRow);
  }

  showModel() {
    this.show = true;
  }

  HideSearchPanel() {
    this.resetForm();
  }

  resetForm() {
    this.cs.resetForm(this.form);
    this.form = this.dcs.toFormGroup(this.controls);
    this.rows = null;
  }

  GetSuggestVal(selectedRow: any) {
    this.emitSuggest.emit(selectedRow);
  }

  BindControl(control) {
    control.childControls.forEach(child => {
      switch (child.controlType) {
        case ControlType.Dropdown:
          this.controls.filter(ctrl => ctrl.key == child.key)[0].options = child.options;
      }
    });
    this.cdRef.detectChanges();
  }


  ResetEntryForm(event: any) {
    this.ResetEntryClick.emit(event.data);
  }

  RemoveRecords(event: any) {
    this.RemoveRecordsClick.emit(event.data);
  }

  exportAsXLSX(): void {
    this.cs.exportAsExcelFile(this.rows, this.resultTitle);
  }
}
==========================================================================

I-Editor Component 

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel" for="float-input">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
         value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <p-editor [formControlName]="control.key" [required]="control.required" [readonly]="control.disabled? 'disabled' : null"
            [style]="{'height':'50px'}" class="prime-form-control"></p-editor>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>
            
import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { BaseControlComponent } from '../base-control/base-control.component';
import { FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-editor',
  templateUrl: './editor.component.html',
  styleUrls: ['./editor.component.scss']
})
export class EditorComponent extends BaseControlComponent implements OnInit {
  formGroup: FormGroup;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
  }
}
============================================================================

J-file Upload Component

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">

  <label *ngIf="!showEditLabel">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
    value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <div class="row">
    <div class="col-md-11">
      <p-fileUpload #fileUploader [name]="files" [multiple]="multiple" [customUpload]="customUpload" (uploadHandler)="UploadHandler($event)"
        [mode]="mode" [disabled]="control.disabled? 'disabled' : null" class="prime-form-control"></p-fileUpload>
      <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
    </div>
    <div class="col-md-1">
      <a id="viewFile" (click)="showAttachmentFiles()" data-toggle="modal" data-target=".attachment-modal">View Files</a>
    </div>
  </div>
</div>


<div *ngIf="show" class="modal fade attachment-modal" tabindex="-1" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title"> Attachments </h5>
        <div class="pull-right">
          <button pButton type="submit" icon="pi pi-trash" pTooltip="Remove" tooltipPosition="top" (click)="onDeleteAttachments()"></button>
          <button pButton type="submit" icon="pi pi-times" pTooltip="Close" tooltipPosition="top" class="m-l-5"
            data-dismiss="modal"></button>
        </div>
      </div>
      <div class="modal-body">
        <eska-datatable [title]="gridHeaderAttachments" [cols]="colsAttachments" [rows]="rowsAttachments" showCheckBox="true"
          (OnLinkSelected)="OnLinkSelected($event)" (OnCheckboxSelected)="OnCheckboxSelected($event)">
        </eska-datatable>
      </div>
    </div>
  </div>
</div>



import { Component, OnInit, Input, ChangeDetectorRef, Output, EventEmitter, ViewChild } from '@angular/core';
import { BaseControlComponent } from '../base-control/base-control.component';
import { FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { CommonService } from '../../services/common.service';
import { FileUpload } from 'primeng/primeng';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';
import { BstResourcesService } from '../../services/bst-resources.service';

@Component({
  selector: 'eska-file-upload',
  templateUrl: './file-upload.component.html',
  styleUrls: ['./file-upload.component.scss']
})
export class FileUploadComponent extends BaseControlComponent implements OnInit {
  file: File;
  formGroup: FormGroup;
  show: boolean = false;
  loading: boolean = false;
  formData = new FormData();

  @Input() mode: string;
  @Input() files: File[];
  @Input() multiple: boolean;
  @Input() customUpload: boolean;
  @Input() colsAttachments: any[];
  @Input() rowsAttachments: any[];

  @Output() uploadHandler = new EventEmitter();
  @Output() OnCheckboxSelectedAttachments = new EventEmitter();
  @Output() OnDeleteAttachments = new EventEmitter();

  @ViewChild('fileUploader') fileUploader: FileUpload;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe, private cs: CommonService) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
  }
  onDeleteAttachments() {
    this.OnDeleteAttachments.emit();
  }
  OnLinkSelected(event: any) {
    this.loading = true;
    this.cs.showOrHideSpinner(this.loading);
    this.cs.downloadFile(event.commandRow.AttachmentPath).subscribe(
      data => {
        this.downloadFile(data);
        this.cs.pushMessage("success", "Success", "File Downloaded Successfully");
        this.loading = false;
        this.cs.showOrHideSpinner(this.loading);
      },
      err => {
        console.log(err);
        this.loading = false;
        this.cs.showOrHideSpinner(this.loading);
        this.cs.pushError(err);
      });
  }
  OnCheckboxSelected(selectedRows: any[]) {
    this.OnCheckboxSelectedAttachments.emit(selectedRows);
  }

  clearFileUploader() {
    this.fileUploader.clear();
  }
  showAttachmentFiles() {
    this.show = true;
  }
  downloadFile(data: any) {
    const blob = new Blob([data], { type: data.type });
    const url = window.URL.createObjectURL(blob);

    var a = document.createElement('a');
    a.href = url;
    a.download = url.substr(url.lastIndexOf('/') + 1);
    a.click();
  }
  UploadHandler(event: any) {
    debugger;
    this.loading = true;
    this.cs.showOrHideSpinner(this.loading);
    this.files = event.files;
    if (this.files.length > 0) {

      //this.formData.delete("files");

      Array.from(this.files).forEach(file => {
        this.formData.append("files", file, file.name);
      });

      this.cs.uploadFiles(this.formData).subscribe(
      
        data => {
          this.cs.pushMessage("success", "Success", "File(s) Uploaded Successfully");
          this.loading = false;
          this.cs.showOrHideSpinner(this.loading);
          this.uploadHandler.emit(data);
        },
        err => {
          console.log(err);
          this.cs.pushError(err);
          this.loading = false;
          this.cs.showOrHideSpinner(this.loading);
        }
      );
    }
  }
}


====================================================================
L-multiselect component

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
         value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <p-multiSelect [options]="options" optionLabel="label" [panelStyle]="{minWidth:'12em'}" class="prime-form-control" 
                 [formControlName]="control.key" [required]="control.required" [readonly]="control.disabled? 'disabled' : null">
  </p-multiSelect>

  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>


import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BaseControlComponent } from '../base-control/base-control.component';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-multiselect',
  templateUrl: './multiselect.component.html',
  styleUrls: ['./multiselect.component.scss']
})
export class MultiselectComponent extends BaseControlComponent implements OnInit {
  formGroup: FormGroup;
  @Input() options: any[];

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
  }
}
===================================================
O-radio button component

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
    value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <div class="radio radio-css">
    <div [ngClass]="optionStyle" *ngFor="let option of (control.isDynamic ? control.options : options);">
      <p-radioButton [name]="control.key" [value]="option.value" [label]="option.label" [formControlName]="control.key"
        [disabled]="control.disabled? 'disabled' : null" [required]="control.required" (onClick)="BindControl(control)">
      </p-radioButton>
    </div>
  </div>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>

import { Component, OnInit, Input, ChangeDetectorRef, SimpleChanges, OnChanges } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { SelectItem } from 'primeng/api';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { BaseControlComponent } from '../base-control/base-control.component';
import { ControlType } from '../../../models/data-models';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-radio-button',
  templateUrl: './radio-button.component.html',
  styleUrls: ['./radio-button.component.scss']
})
export class RadioButtonComponent extends BaseControlComponent implements OnInit, OnChanges {
  formGroup: FormGroup;
  @Input() options: SelectItem[] = [];
  private optionStyle: string;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
    if (this.control.isDynamic)
      this.dynamicControlService.fillControlOptions(this.control, this.form).then(
        data => {
          this.control.options = data.options;
          this.setOptionsClass(this.control.options.length);
        });
  }

  ngOnChanges(simpleChanges: SimpleChanges){
    if (simpleChanges.options != undefined) {
      debugger
      let count = simpleChanges.options.currentValue.length;
      this.setOptionsClass(count);
    }
  }

  BindControl(control) {
    if (control.isDynamic)
      control.childControls.forEach(
        child => {
          switch (child.controlType) {
            case ControlType.Dropdown:
              this.dynamicControlService.fillControlOptions(child, this.form).then(
                data => {
                  if (data != undefined || data != null) {
                    this.bindControl.emit(data);
                  }
                });
              break;
          }
        });
  }

  setOptionsClass(optionsCount) {
    switch (optionsCount) {
      case 1:
        this.optionStyle = "ui-g-12";
        break;
      case 2:
        this.optionStyle = "ui-g-6";
        break;
      case 3:
        this.optionStyle = "ui-g-4";
        break;
      case 4:
        this.optionStyle = "ui-g-3";
        break;
    }
  }
}
========================================================
P-textarea component

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
         value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <div class="ui-inputgroup">
    <textarea pInputTextarea [formControlName]="control.key" [required]="control.required" [attr.disabled]="control.disabled? 'disabled' : null" class="form-control" [rows]="rows"></textarea>

    <span *ngIf="!control.required && !control.disabled" class="ui-inputgroup-addon ui-inputgroup-addon-optional"><i class="pi pi-pencil"></i></span>
    <span *ngIf="control.required && !control.disabled" class="ui-inputgroup-addon ui-inputgroup-addon-required"><i class="pi pi-pencil"></i></span>
    <span *ngIf="!control.required && control.disabled" class="ui-inputgroup-addon ui-inputgroup-addon-disabled"><i class="pi pi-pencil"></i></span>
  </div>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>
</div>


import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BaseControlComponent } from '../base-control/base-control.component';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-textarea',
  templateUrl: './textarea.component.html',
  styleUrls: ['./textarea.component.scss']
})
export class TextareaComponent extends BaseControlComponent implements OnInit {
  formGroup: FormGroup;
  @Input() rows: number;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
  }
}
===============================================
Q-TextBox Component 

<div (contextmenu)="onContextMenu($event)" #wrapperDiv [formGroup]="formGroup">
  <label *ngIf="!showEditLabel">{{ control.labelKey | translate }}</label>
  <input *ngIf="showEditLabel" #editLabelInput id="txtEditLabel" placeholder="Edit label.." type="text" class="form-control label-edit"
         value="{{ control.labelKey | translate }}" (focusout)="onFocusout($event)" />

  <div class="ui-inputgroup">

    <input [id]="control.key" [type]="type" [formControlName]="control.key" [required]="control.required"
           [attr.disabled]="control.disabled? 'disabled' : null" pInputText class="form-control"
           eskaNumeric [numberType]="numberType" [min]="min" [max]="max" [minDecimalPoint]="minDecimalPoint" [maxDecimalPoint]="maxDecimalPoint"
           [currencyFormat]="currencyFormat" [allowNegative]="allowNegative" />

    <span *ngIf="!control.required && !control.disabled" class="ui-inputgroup-addon ui-inputgroup-addon-optional"><i class="pi pi-pencil"></i></span>
    <span *ngIf="control.required && !control.disabled" class="ui-inputgroup-addon ui-inputgroup-addon-required"><i class="pi pi-pencil"></i></span>
    <span *ngIf="!control.required && control.disabled" class="ui-inputgroup-addon ui-inputgroup-addon-disabled"><i class="pi pi-pencil"></i></span>
  </div>
  <p-contextMenu [global]="false" [target]="wrapperDiv" [model]="items"></p-contextMenu>

</div>


import { Component, OnInit, Input, ChangeDetectorRef, AfterViewChecked, AfterViewInit, KeyValueDiffers, KeyValueDiffer, Output, EventEmitter, DoCheck } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BaseControlComponent } from '../base-control/base-control.component';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { TranslatePipe } from '../../pipes/translate.pipe';
import { FilterPipe } from '../../pipes/filter.pipe';
import { DynamicControlService } from '../../services/dynamic-control.service';
import { NumberTypes } from '../../../models/data-models';
import { BstResourcesService } from '../../services/bst-resources.service';
import { BstPagesControlsService } from '../../services/bst-pages-controls.service';

@Component({
  selector: 'eska-textbox',
  templateUrl: './textbox.component.html',
  styleUrls: ['./textbox.component.scss']
})
export class TextboxComponent extends BaseControlComponent implements OnInit {

  formGroup: FormGroup;

  @Input() type: string = 'text';
  @Input() numberType;
  @Input() minDecimalPoint;
  @Input() maxDecimalPoint;
  @Input() allowNegative;
  @Input() min;
  @Input() max;
  @Input() currencyFormat;

  constructor(public cdRef: ChangeDetectorRef, public bstResourcesService: BstResourcesService, public bstPagesControlsService: BstPagesControlsService, public router: Router, public authenticationService: AuthenticationService,
    public dynamicControlService: DynamicControlService, public translatePipe: TranslatePipe, public filterPipe: FilterPipe) {
    super(cdRef, bstResourcesService, bstPagesControlsService, router, authenticationService, dynamicControlService, translatePipe, filterPipe);
  }

  ngOnInit() {
    this.formGroup = this.form;
    if (this.control.isDynamic)
      switch (this.control.type) {
        case 'text':
          this.type = 'text';
          break;
        case 'percentage':
          this.type = 'text';
          this.numberType = NumberTypes.Percentage;
          this.min = 0;
          this.max = 100;
          this.minDecimalPoint = 2;
          this.maxDecimalPoint = 2;
          this.allowNegative = false;
          break;
        case 'decimal':
          this.type = 'text';
          this.numberType = NumberTypes.Decimal;
          this.minDecimalPoint = 2;
          this.maxDecimalPoint = 2;
          this.currencyFormat = true;
          this.allowNegative = true;
          break;
        case 'integer':
          this.type = 'number';
          this.numberType = NumberTypes.Integer;
          this.allowNegative = true;
          break;
      }
  }
}

===========================================================
Directives 

import { Directive, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import {
  Input
} from '@angular/core';
import { DynamicControlService } from '../services/dynamic-control.service';


@Directive({
  selector: '[eskaDisable]'
})
export class DisableDirective {
  @Input() set appDisable(disable: any) {

    if (this.dcs.convertToBoolean(disable) == true) {
      this.ngControl.control.disable();
    } else {
      this.ngControl.control.enable();
    }
  }
  constructor(@Self() private ngControl: NgControl, private dcs: DynamicControlService) {

  }
}


import { Directive, OnInit, ElementRef, Input, HostListener, OnChanges, SimpleChanges, Self } from '@angular/core';
import { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';

import { NgControl } from '@angular/forms';
import { NumberTypes } from '../../models/data-models';


@Directive({
  selector: '[eskaNumeric]',
  providers: [DecimalPipe, PercentPipe, CurrencyPipe]
})
export class NumericDirective implements OnInit {

  private inputElement: HTMLInputElement;
  @Input() numberType;
  @Input() minDecimalPoint;
  @Input() maxDecimalPoint;
  @Input() allowNegative;
  @Input() min;
  @Input() max;
  @Input() currencyFormat;

  @Input() value;

  constructor(@Self() private ngControl: NgControl, private elementRef: ElementRef, private decimalPipe: DecimalPipe, private percentagePipe: PercentPipe) {
    this.inputElement = this.elementRef.nativeElement;
  }

  ngOnInit() {
    this.getNumericValue(this.inputElement.value);
  }

  @HostListener("blur", ["$event.target.value"])
  onBlur(value) {
    if (value)
      this.getNumericValue(value);
  }

  @HostListener("focus", ["$event.target.value"])
  onfocus(value) {
    if (value)
      this.getNumericValue(value);
  }

  getNumericValue(value) {
    if (!this.allowNegative && value < 0) {
      value = value * -1;
    }
    let digitInfo = "1.";
    let numericValue = "";

    var hasValue = value != null && value != "" && value != " ";

    if (hasValue) {
      if (this.min && parseFloat(value) < parseFloat(this.min))
        value = this.min;
      if (this.max && parseFloat(value) > parseFloat(this.max))
        value = this.max;
    }

    if (this.numberType == NumberTypes.Decimal) {
      digitInfo += this.minDecimalPoint ? this.minDecimalPoint : '0';
      digitInfo += this.maxDecimalPoint ? '-' + this.maxDecimalPoint : '-3';
      if (value.indexOf(',') > -1) {
        let arrValue = value.split(',');
        let v = '';
        arrValue.forEach(element => {
          v += element;
        });
        value = parseFloat(v);
      }

      numericValue = this.decimalPipe.transform((hasValue ? value : 0), digitInfo);
      if (!this.currencyFormat && numericValue != null && numericValue.includes(","))
        numericValue = numericValue.replace(/[,\s]+|[,\s]+/g, "");
    }
    else if (this.numberType == NumberTypes.Percentage) {
      digitInfo += this.minDecimalPoint ? this.minDecimalPoint : '0';
      digitInfo += this.maxDecimalPoint ? '-' + this.maxDecimalPoint : '-3';
      numericValue = this.percentagePipe.transform((parseFloat(hasValue ? value : 0) / 100), digitInfo);
    }
    else if (this.numberType == NumberTypes.Integer) {
      digitInfo += '0-0';
      numericValue = this.decimalPipe.transform((hasValue ? value : 0), digitInfo);
      if (numericValue != null && numericValue.includes(","))
        numericValue = numericValue.replace(/[,\s]+|[,\s]+/g, "");
    }
    else
      numericValue = value;

    this.inputElement.value = numericValue;
    this.ngControl.control.patchValue(this.inputElement.value);
  }

  @HostListener('keypress', ['$event'])
  keyEvent(event: KeyboardEvent) {
    if (this.numberType != undefined && this.numberType != '') {
      let regexStr = (this.allowNegative) ? '^[0-9_\\.\\-]*$' : '^[0-9_\\.]*$';
      return new RegExp(regexStr).test(event.key);
    }
  }
}

import { Directive, Self } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
import {
  Input
} from '@angular/core';
import { DynamicControlService } from '../services/dynamic-control.service';

@Directive({
  selector: '[eskaRequired]'
})
export class RequiredDirective {
  @Input() set shcRequired(required: any) {
    if (this.dcs.convertToBoolean(required) == true) {
      this.ngControl.control.setValidators([Validators.required]);
      this.ngControl.control.updateValueAndValidity();
    } else {
      this.ngControl.control.clearValidators();
      this.ngControl.control.updateValueAndValidity();
    }

  }
  constructor(@Self() private ngControl: NgControl, private dcs: DynamicControlService) {

  }

}

=============================================================
Pipes 


import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'dateFormatter'
})
export class DateFormatterPipe implements PipeTransform {

  transform(value: Date, args?: any): Date {
    let date;
    if (value != undefined || value != null) {
      value = new Date(value);
      date = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds()));
    }
    return date;
  }
}


import { Pipe, PipeTransform } from '@angular/core';
import { ControlBase } from '../controls/dynamic-search/control-classes/control-base';

@Pipe({
  name: 'filter'
})
  //This Pipe is used to filter the controls based on form group name and used in the
  //        this.searchControls = this.filterPipe.transform(this.controls, 'coverTypesSearchForm');
export class FilterPipe implements PipeTransform {

  transform(controls: ControlBase<any>[], formKey: string, controlKey: string = ''): any {
    if (controlKey != '') {
      if (!controls || !formKey) {
        return null;
      }

      let control: ControlBase<any>;
      control = controls.filter(ctrl => ctrl.key === controlKey && ctrl.form === formKey)[0];
      if (control == undefined)
        control = new ControlBase<any>();
      return control;
    }
    else {
      if (!controls || !formKey) {
        return null;
      }

      let lstControl: ControlBase<any>[] = [];
      lstControl = controls.filter(ctrl => ctrl.form === formKey);
      return lstControl;
    }
  }
}


import { Pipe, Input, PipeTransform } from '@angular/core';
import { DecimalPipe, PercentPipe } from '@angular/common';
import { NumberTypes } from 'src/app/models/data-models';


@Pipe({
  name: 'numeric'
})
export class NumericPipe implements PipeTransform {
  @Input('numeric') digitInfo: string = "1.3-3";

  constructor(private decimalPipe: DecimalPipe, private percent: PercentPipe) { }

  transform(value, numberType, digitInfo: string) {
    if (value == undefined) {
      value = "0"
    }

    let numericValue = "0";
    if (numberType == NumberTypes.Decimal) {

      if (value.toString().includes(',')) {
        if (value.indexOf(',') > -1) {
          let arrValue = value.split(',');
          let v = '';
          arrValue.forEach(element => {
            v += element;
          });
          value = parseFloat(v);
        }
      }
      return numericValue = this.decimalPipe.transform(value, digitInfo);
    }
    else if (numberType == NumberTypes.Percentage) {
      return numericValue = this.percent.transform((parseFloat(value) / 100), digitInfo);
    }
    else if (numberType == NumberTypes.Integer) {
      digitInfo += '0-0';
      return numericValue = this.decimalPipe.transform(value, digitInfo).replace(",", "");
    }
    else
      return numericValue = value;
  }

  parse(value) {
    if (value != null && value != "" && value != undefined) {
      if (value.toString().includes(','))
        value = value.replace(",", "");

      if (value.toString().includes('%'))
        value = parseInt(value.substring(0, value.length - 1));

      return parseFloat(value);
    }
    else
    {
      return parseFloat("0");
    }
  }
}


import { Pipe, PipeTransform } from '@angular/core';
import { BstResourcesService } from '../services/bst-resources.service';

@Pipe({
  name: 'translate',
  pure: false
})
  //This Pipe is used to load the name of resource based on the Resources loaded from database
  //is used on all custom controls like textbox  , dropdown , etc.....
export class TranslatePipe implements PipeTransform {

  constructor(private bstResourcesService: BstResourcesService) {}

  transform(key: any): any {
      return this.bstResourcesService.Resources[key] || key;
  }  
} 
 



============================================================

Example:-

<div *ngIf="isLoaded">
  <eska-dynamic-search [ViewMode]="ViewMode.Block" [show]="show" (onSearch)="SearchByCriteria($event)" (onSelectedRow)="OnSelectedRow($event)"
                       (RemoveRecordsClick)="DeleteModel($event)" (onCheckBoxSelect)="OnCheckboxSelected($event)" (onCheckboxUnSelect)="OnCheckboxUnSelected($event)"
                       [cols]="cols" [rows]="rows" [dialogTitle]="dialogTitle" [resultTitle]="resultTitle" [showCheckBox]="true" [form]="coverTypesSearchForm"
                       [controls]="searchControls" (ResetEntryClick)="OnResetEntry($event)"></eska-dynamic-search>
  <div class="row">
    <div class="col-lg-12">
      <div class="panel panel-inverse">
        <div class="panel-heading">
          <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse" title="Expand/Collapse">
              <i class="fa fa-minus"></i>
            </a>
          </div>
          <h4 class="panel-title">Cover Types Entry</h4>
        </div>
        <div class="panel-body">
          <form [formGroup]="coverTypesEntryForm">
            <div class="row" dragula="sortable">
              <div *ngIf="entryControls | filter:'coverTypesEntryForm':'insuranceClass' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="coverTypesEntryForm" [options]="insuranceClassList"></eska-dropdown>
              </div>
              <div *ngIf="entryControls | filter:'coverTypesEntryForm':'name' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="coverTypesEntryForm" [type]="'text'"></eska-textbox>
              </div>
              <div *ngIf="entryControls | filter:'coverTypesEntryForm':'name2' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="coverTypesEntryForm" [type]="'text'"></eska-textbox>
              </div>
              <div *ngIf="entryControls | filter:'coverTypesEntryForm':'parentCover' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="coverTypesEntryForm" [options]="parentCoversList"></eska-dropdown>
              </div>
            </div>
          </form>
        </div>
        <div class="panel-footer text-right">
          <button type="button" class="btn btn-primary btn-xs" (click)="saveUpdateModel()" [disabled]="!coverTypesEntryForm.valid">
            {{ showSaveUpdate === false ? 'Save' : 'Update' }}
          </button>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-12">
      <div class="panel panel-inverse">
        <div class="panel-heading">
          <div class="panel-heading-btn">
            <a href="javascript:;" (click)="OnResetEntryPremium()" class="btn btn-xs btn-icon btn-circle btn-success"
               title="Add"><i class="fa fa-file"></i></a>
            <a href="javascript:;" (click)="DeleteModelPremium()" class="btn btn-xs btn-icon btn-circle btn-danger" title="Delete"
               data-click="panel-remove"><i class="fa fa-trash"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse" title="Expand/Collapse">
              <i class="fa fa-minus"></i>
            </a>
          </div>
          <h4 class="panel-title">Cover Types Premium</h4>
        </div>
        <eska-datatable showCheckBox="ture" [cols]="colsPremium" [rows]="rowsPremium" [selectedRows]="selectedRowsPremium"
                        (OnRowSelected)="OnSelectedRowPremium($event)" (OnCheckboxSelected)="OnCheckboxSelectedPremium($event)"
                        (OnCheckboxUnSelected)="OnCheckboxUnSelectedPremium($event)"></eska-datatable>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-12">
      <div class="panel panel-inverse">
        <div class="panel-heading">
          <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse" title="Expand/Collapse">
              <i class="fa fa-minus"></i>
            </a>
          </div>
          <h4 class="panel-title">Policy Premium Entry</h4>
        </div>
        <div class="panel-body">
          <form [formGroup]="policyPremiumEntryForm">
            <div class="row" dragula="sortable">
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'insuranceClass' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="insuranceClassList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'subLOB' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="subLOBList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'rateFraction' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="rateFractionList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'minPremium' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'premiumRate' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'text'" [numberType]="NumberTypes.Percentage" [min]="0" [max]="100" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'premiumAmount' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'deductible' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'text'" [numberType]="NumberTypes.Percentage" [min]="0" [max]="100" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'maxDeductibleAmount' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'minDeductibleAmount' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'sumInsuredFrom' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'sumInsuredTo' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>              
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'vehicleModel' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="vehicleModelList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'vehicleType' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="vehicleTypeList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'vehicleBody' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="vehicleBodyList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'repairCondition' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="repairConditionList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'driverAgeFrom' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'driverAgeTo' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'vehicleAgeFrom' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'vehicleAgeTo' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-textbox [control]="control" [form]="policyPremiumEntryForm" [type]="'number'" [numberType]="NumberTypes.Integer" [allowNegative]="false"></eska-textbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'category' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="categoriesList"></eska-dropdown>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'branch' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-dropdown [control]="control" [form]="policyPremiumEntryForm" [options]="branchesList"></eska-dropdown>
              </div>
            </div>
            <br>
            <div class="row">
              <div class="col-md-12 form-group">
                <p-pickList class="prime-picklist" [source]="insuranceCompanies" [target]="excludedInsuranceCompanies"
                            sourceHeader="Insurance Companies" targetHeader="Excluded Insurance Companies" [responsive]="true"
                            dragdrop="true" [showSourceControls]="false" [showTargetControls]="false" filterBy="label"
                            sourceFilterPlaceholder="Search for Insurance Companies" targetFilterPlaceholder="Search for Excluded Insurance Companies">
                  <ng-template let-company pTemplate="item">
                    <span>{{ company.label }}</span>
                  </ng-template>
                </p-pickList>
              </div>
            </div>
            <div class="row">
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'applyPremium' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-checkbox [control]="control" [form]="policyPremiumEntryForm"></eska-checkbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'autoAdd' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-checkbox [control]="control" [form]="policyPremiumEntryForm"></eska-checkbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'isActive' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-checkbox [control]="control" [form]="policyPremiumEntryForm"></eska-checkbox>
              </div>
              <div *ngIf="entryPremiumControls | filter:'policyPremiumEntryForm':'applyAgentCommission' as control" [ngClass]="control.className" [ngStyle]="{'display': control.hidden? 'none' : 'block'}">
                <eska-checkbox [control]="control" [form]="policyPremiumEntryForm"></eska-checkbox>
              </div>
            </div>
          </form>
        </div>
        <div class="panel-footer text-right">
          <button type="button" class="btn btn-primary btn-xs" (click)="saveUpdateModelPremium()" [disabled]="!policyPremiumEntryForm.valid">
            {{ showSaveUpdatePremium === false ? 'Save' : 'Update'}}
          </button>
        </div>
      </div>
    </div>
  </div>
</div>




import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { BaseComponentComponent } from '../base-component/base-component.component';
import { AuthenticationService } from '../shared/services/authentication.service';
import { DynamicControlService } from '../shared/services/dynamic-control.service';
import { FilterPipe } from '../shared/pipes/filter.pipe';
import { Router } from '@angular/router';
import { ViewMode, User, BstCoverTypes, NumberTypes, SearchBstCoverTypes, BstCoverPremiums, Domains, InsurersPartiesType, BstCoverParties, MajorCodes } from '../models/data-models';
import { ControlBase } from '../shared/controls/dynamic-search/control-classes/control-base';
import { FormGroup } from '@angular/forms';
import { CommonService } from '../shared/services/common.service';
import { SelectItem, ConfirmationService } from 'primeng/api';
import { CoverTypesService } from '../shared/services/cover-types.service';
import { InsuranceClassesService } from '../shared/services/insurance-classes.service';
import { CoverPremiumsService } from '../shared/services/cover-premiums.service';
import { BstPolicyTypesService } from '../shared/services/bst-policy-types.service';
import { DomainService } from '../shared/services/DomainService';
import { PartiesService } from '../shared/services/parties-service.service';
import { PercentPipe, DecimalPipe } from '@angular/common';
import { CoreService } from '../shared/services/core.service';
import { CodesService } from '../shared/services/codes.service';
import { BstResourcesService } from '../shared/services/bst-resources.service';

@Component({
  selector: 'bms-cover-types',
  templateUrl: './cover-types.component.html',
  styleUrls: ['./cover-types.component.css']
})
export class CoverTypesComponent extends BaseComponentComponent implements OnInit {

  coverTypesSearchForm: FormGroup;
  coverTypesEntryForm: FormGroup;
  policyPremiumEntryForm: FormGroup;

  model: BstCoverTypes = new BstCoverTypes();
  modelPremium: BstCoverPremiums = new BstCoverPremiums();

  classId: number = 0;

  searchControls: ControlBase<any>[] = [];
  entryControls: ControlBase<any>[] = [];
  entryPremiumControls: ControlBase<any>[] = [];
  isLoaded: boolean = false;
  get ViewMode() { return ViewMode }
  get NumberTypes() { return NumberTypes }

  dialogTitle: string = "Cover Types Search";
  resultTitle: string = "Cover Types";
  cols: any[] = [
    { header: "Id", field: "id", hidden: true },
    { header: "Insurance Class", field: "insuranceClass", hidden: false },
    { header: "Name", field: "name", hidden: false },
    { header: "Name2", field: "name2", hidden: false }
  ];
  rows: any[] = [];
  selectedRows: any[] = [];

  colsPremium: any[] = [
    { header: "Id", field: "id", hidden: true },
    { header: "Class", field: "insuranceClass", hidden: false },
    { header: "Sub LOB", field: "subLOB", hidden: false },
    { header: "Rate", field: "paremiumRate", hidden: false },
    { header: "Premium Amount", field: "premiumAmount", hidden: false },
    { header: "Deductible %", field: "deductible", hidden: false },
    { header: "Deductible Amount", field: "maxDedAmount", hidden: false },
    { header: "Min Premium", field: "minPremium", hidden: false },
  ];
  rowsPremium: any[] = [];
  selectedRowsPremium: any[] = [];

  insuranceClassList: SelectItem[] = [{ label: "Select", value: null }];
  parentCoversList: SelectItem[] = [];
  subLOBList: SelectItem[] = [];
  rateFractionList: SelectItem[] = [];
  vehicleTypeList: SelectItem[] = [];
  vehicleModelList: SelectItem[] = [];
  vehicleBodyList: SelectItem[] = [];
  repairConditionList: SelectItem[] = [];
  categoriesList: SelectItem[] = [];
  branchesList: SelectItem[] = [];
  insuranceCompanies: SelectItem[] = [];
  excludedInsuranceCompanies: any[] = [];

  showSaveUpdate: boolean = false;
  showSaveUpdatePremium: boolean = false;
  loading: boolean;

  constructor(public bstResourcesService: BstResourcesService, public dcs: DynamicControlService, public router: Router,
    private filterPipe: FilterPipe, public authenticationService: AuthenticationService, private cs: CommonService, private cm: ConfirmationService,
    private coverTypesService: CoverTypesService, private insuranceClassesService: InsuranceClassesService, private coverPremiumsService: CoverPremiumsService,
    private bstPolicyTypesService: BstPolicyTypesService, private domainService: DomainService, private partiesService: PartiesService, private codesService: CodesService,
    private cdRef: ChangeDetectorRef, private percentPipe: PercentPipe, private decimalPipe: DecimalPipe, private coreService: CoreService) {
    super(dcs, router, authenticationService, bstResourcesService);

    this.initControls();
  }

  async initControls() {
    let getControlsByKey$ = this.generateControls("SBM");
    await getControlsByKey$.then(
      data => {
        debugger;
        this.searchControls = this.filterPipe.transform(this.controls, 'coverTypesSearchForm');
        this.entryControls = this.filterPipe.transform(this.controls, 'coverTypesEntryForm');
        this.entryPremiumControls = this.filterPipe.transform(this.controls, 'policyPremiumEntryForm');
        this.generateSearchControls();
        this.isLoaded = true;
        this.cdRef.detectChanges()
      }
    );
    debugger;
  }

  ngOnInit() {
    this.fillLists();
    this.getInsuranceCompanies();
    this.createForm();
    this.resetForm();
  }

  generateSearchControls() {
    this.coverTypesSearchForm = this.dcs.toFormGroup(this.searchControls);
  }

  createForm() {
    this.coverTypesEntryForm = this.cs.fb.group(
      {
        insuranceClass: [null],
        name: [null],
        name2: [null],
        parentCover: [null]
      }
    );

    this.policyPremiumEntryForm = this.cs.fb.group(
      {
        insuranceClass: [null],
        subLOB: [null],
        rateFraction: ["1"],
        minPremium: [null],
        premiumRate: [null],
        premiumAmount: [null],
        deductible: [null],
        maxDeductibleAmount: [null],
        minDeductibleAmount: [null],
        sumInsuredFrom: [null],
        sumInsuredTo: [null],
        vehicleType: [null],
        vehicleModel: [null],
        vehicleBody: [null],
        repairCondition: [null],
        driverAgeFrom: [null],
        driverAgeTo: [null],
        vehicleAgeFrom: [null],
        vehicleAgeTo: [null],
        category: [null],
        branch: [null],
        applyPremium: [true],
        autoAdd: [true],
        isActive: [true],
        applyAgentCommission: [true]
      }
    );

    this.bindEvents();
  }

  fillLists() {
    this.getInsuranceClasses();
    this.domainService.getDomainValues(Domains.RateFraction, this.user.companyId).subscribe(data => { this.rateFractionList = data; });
    this.getVehicleType();
    this.getVehicleModel();
    this.getVehicleBody();
    this.domainService.getDomainValues(Domains.RepairCondition, this.user.companyId).subscribe( data => { this.repairConditionList = data; });
    this.getCategories();
    this.getBranches();
  }

  getInsuranceCompanies() {
    this.partiesService.GetAll(InsurersPartiesType.InsuranceCompany).subscribe(
      res => {
        res.splice(0, 1);
        this.insuranceCompanies = res;
      }
    )
  }

  bindEvents() {
    this.policyPremiumEntryForm.controls.insuranceClass.valueChanges.subscribe(
      classId => {
        this.getPolicyTypes(classId);
      }
    );

    this.policyPremiumEntryForm.controls.premiumAmount.valueChanges.subscribe(
      val => {
        if (val != 0)
          this.policyPremiumEntryForm.patchValue({
            premiumRate: [this.percentPipe.transform(0, "1.0-5")]
          });
      }
    );

    this.policyPremiumEntryForm.controls.premiumRate.valueChanges.subscribe(
      val => {
        if (parseFloat(val) != 0)
          this.policyPremiumEntryForm.patchValue({
            premiumAmount: "0"
          });
      }
    );
  }

  resetForm() {
    this.cs.resetForm(this.coverTypesEntryForm);
    this.showSaveUpdate = false;
    this.model = new BstCoverTypes();
  }

  setFormValues() {
    this.coverTypesEntryForm.patchValue({
      insuranceClass: this.model.classId.toString(),
      name: this.model.name,
      name2: this.model.name2,
      parentCover: this.model.parentCover != null ? this.model.parentCover.toString() : null
    });

    this.policyPremiumEntryForm.patchValue({
      insuranceClass: this.model.classId.toString()
    })
    this.classId = this.model.classId;
    this.policyPremiumEntryForm.controls.insuranceClass.disable();
  }

  setModelValues() {
    const coverTypeForm = this.coverTypesEntryForm.value;
    this.model.classId = coverTypeForm.insuranceClass;
    this.model.name = coverTypeForm.name;
    this.model.name2 = coverTypeForm.name2;
    this.model.parentCover = coverTypeForm.parentCover;
  }

  saveUpdateModel() {
    this.setModelValues();
    if (this.model.id > 0) {
      this.model.modificationUser = this.user.userName;
      this.model.modificationDate = new Date();

      this.coverTypesService.Put(this.model).subscribe(
        data => {
          console.log(data);
          this.SearchByCriteria();
          this.resetForm();
          this.cs.addMessage(data.status == 1 ? 'success' : 'error', data.status == 1 ? 'Success ' : 'Error', data.status == 1 ? 'Updated successfully' : 'Error in updating "Cover Type"');
        },
        err => {
          this.cs.addMessage('error', 'Error', 'Error in updating "Cover Types"');
        });
    }
    else {
      this.model.creationUser = this.user.userName;
      this.model.creationDate = new Date();
      this.model.companyId = this.user.companyId;
      this.coverTypesService.Post(this.model).subscribe(
        data => {
          this.model.id = data.data.id;
          this.SearchByCriteria();
          console.log(data);
          this.cs.addMessage(data.status == 1 ? 'success' : 'error', data.status == 1 ? 'Success ' : 'Error', data.status == 1 ? 'Saved successfully' : 'Error in saving "Cover Type"');
        },
        err => {
          this.cs.addMessage('error', 'Error', 'Error in saving "Cover Type"');
          console.log(err);
        }
      );
    }
  }

  DeleteModel() {
    if (this.selectedRows === undefined || this.selectedRows.length == 0) {
      this.cs.pushMessage("warn", "Warn Message", "No rows selected.");
    }
    else {
      this.cm.confirm({
        message: 'Are you sure you want to delete these records?',
        header: 'Delete Confirmation',
        icon: 'fa fa-trash',
        accept: () => {
          this.loading = true;
          this.cs.showOrHideSpinner(this.loading);
          console.log(this.selectedRows);
          this.coverTypesService.DeleteRange(this.selectedRows)
            .subscribe(
              data => {
                this.SearchByCriteria();
                this.selectedRows = [];
                this.loading = false;
                this.cs.showOrHideSpinner(this.loading);
                this.cs.pushMessage("success", "Success", "Record Deleted Successfully");
              },
              err => {
                console.log(err);
                this.loading = false;
                this.cs.showOrHideSpinner(this.loading);
                this.cs.pushError(err);
              });
        },
        reject: () => {
          this.selectedRows = [];
          this.loading = false;
          this.cs.showOrHideSpinner(this.loading);
        }
      });
    }
  }

  OnSelectedRow(event: BstCoverTypes) {
    if (event.id > 0) {
      this.coverTypesService.GetById(event.id).subscribe(
        (res) => {
          this.model = res.data;
          if (this.model.id) {
            this.getAllCoverTypes(this.model.id);
            this.setFormValues();
            this.getPolicyPremiums(this.model.id);
            this.showSaveUpdate = true;
          }
        });
    }
  }

  OnCheckboxSelected(selectedRow: any) {
    this.selectedRows.push(selectedRow);
  }

  OnCheckboxUnSelected(selectedRow: any) {
    if (this.selectedRows.includes(selectedRow))
      this.selectedRows = this.selectedRows.filter(row => row.id !== selectedRow.Id);
  }

  OnResetEntry(event) {
    this.resetForm();
    this.getAllCoverTypes();
  }

  SearchByCriteria() {
    this.loading = true;
    this.cs.showOrHideSpinner(this.loading);
    let searchCriteria = new SearchBstCoverTypes();
    searchCriteria.classId = this.coverTypesSearchForm.value.insuranceClass;
    searchCriteria.policyTypeId = this.coverTypesSearchForm.value.subLOB;
    searchCriteria.coverTypeId = this.coverTypesSearchForm.value.coverName != null ? this.coverTypesSearchForm.value.coverName.value : null;

    this.coverTypesService.GetByCriteria(searchCriteria).subscribe(res => {
      this.loading = false;
      this.cs.showOrHideSpinner(this.loading);
      this.rows = res.data.value;
    });
  }

  getInsuranceClasses() {
    this.insuranceClassesService.GetAllClasses(this.user.companyId).subscribe(
      data => {
        this.insuranceClassList = data;
      }
    )
  }

  getPolicyTypes(classId: number) {
    this.bstPolicyTypesService.GetByClassId(classId).subscribe(
      data => {
        this.subLOBList = data;
      }
    )
  }

  getAllCoverTypes(coverTypeId?: number) {
    this.coverTypesService.GetAllCoverTypes(coverTypeId).subscribe(
      data => {
        this.parentCoversList = data;
      }
    )
  }

  getVehicleType() {
    this.codesService.GetMinorCodesByMajorCode(MajorCodes.VehicleType).subscribe(
      res => {
        this.vehicleTypeList = res;
      }
    );
  }

  getVehicleModel() {
    this.codesService.GetMinorCodesByMajorCode(MajorCodes.VehicleMake).subscribe(
      res => {
        this.vehicleModelList = res;
      }
    );
  }

  getVehicleBody() {
    this.codesService.GetMinorCodesByMajorCode(MajorCodes.VehicleBody).subscribe(
      res => {
        this.vehicleBodyList = res;
      }
    );
  }

  getRepairCondition() {
    //repairConditionList
    this.codesService.GetMinorCodesByMajorCode(1).subscribe(
      res => {
        this.repairConditionList = res;
      }
    );
  }

  getCategories() {
    this.codesService.GetMinorCodesByMajorCode(MajorCodes.VehicleCategory).subscribe(
      res => {
        this.categoriesList = res;
      }
    );
  }

  getBranches() {
    this.coreService.getBranches(this.user.companyId).subscribe(
      res => {
        this.branchesList = res;
      }
    )
  }

  getPolicyPremiums(coverTypeId: number) {
    this.loading = true;
    this.cs.showOrHideSpinner(this.loading);

    this.coverPremiumsService.GetByCoverTypeId(coverTypeId).subscribe(res => {
      this.loading = false;
      this.cs.showOrHideSpinner(this.loading);
      this.rowsPremium = res.data.value;
    });
  }

  OnSelectedRowPremium(event: BstCoverPremiums) {
    if (event.id > 0) {
      this.coverPremiumsService.GetById(event.id).subscribe(
        (res) => {
          this.modelPremium = res.data;
          if (this.modelPremium.id) {
            this.setPolicyPremiumFormValues();
            this.partiesService.getInculdedInsuranceCompany(this.modelPremium.id).subscribe(
              res => {
                this.insuranceCompanies = res.data;
              }
            );
            this.partiesService.getExculdedInsuranceCompany(this.modelPremium.id).subscribe(
              res => {
                this.excludedInsuranceCompanies = res.data;
              }
            );
            this.showSaveUpdatePremium = true;
          }
        });
    }
  }

  OnCheckboxSelectedPremium(selectedRow: any) {
    this.selectedRowsPremium.push(selectedRow);
  }

  OnCheckboxUnSelectedPremium(selectedRow: any) {
    if (this.selectedRowsPremium.includes(selectedRow))
      this.selectedRowsPremium = this.selectedRowsPremium.filter(row => row.Id !== selectedRow.Id);
  }

  OnResetEntryPremium(event) {
    this.resetFormPremium();   
  }

  resetFormPremium() {
    this.cs.resetForm(this.policyPremiumEntryForm);
    this.showSaveUpdatePremium = false;
    this.modelPremium = new BstCoverPremiums();

    this.policyPremiumEntryForm.patchValue({
      applyPremium: [true],
      autoAdd: [true],
      isActive: [true],
      applyAgentCommission: [true]
    });
  }

  setPolicyPremiumFormValues() {
    this.policyPremiumEntryForm.patchValue({
      insuranceClass: this.modelPremium.classId.toString(),
      subLOB: this.modelPremium.policyType.toString(),
      rateFraction: this.modelPremium.rateFraction.toString(),
      minPremium: this.modelPremium.minPremium,
      premiumRate: parseFloat(this.modelPremium.paremiumRate.toString()),
      premiumAmount: this.modelPremium.premiumAmount,
      deductible: this.modelPremium.deductible,
      maxDeductibleAmount: this.modelPremium.maxDedAmount,
      minDeductibleAmount: this.modelPremium.minDedAmount,
      sumInsuredFrom: this.modelPremium.fromSumInsured,
      sumInsuredTo: this.modelPremium.toSumInsured,
      vehicleType: this.modelPremium.vehicleType,
      vehicleModel: this.modelPremium.vehicleModel,
      vehicleBody: this.modelPremium.vehicleBody,
      repairCondition: this.modelPremium.repairCondition,
      driverAgeFrom: this.modelPremium.fromDriverAge,
      driverAgeTo: this.modelPremium.toDriverAge,
      vehicleAgeFrom: this.modelPremium.fromVehicleAge,
      vehicleAgeTo: this.modelPremium.toVehicleAge,
      category: this.modelPremium.category,
      branch:
        this.modelPremium.branch ? {
          label: this.branchesList.length > 0 ? this.branchesList.filter(i => i.value == this.modelPremium.branch.toString())[0].label : '',
          value: this.modelPremium.branch.toString()
        } : null,
      applyPremium: this.modelPremium.applyPremium,
      autoAdd: this.modelPremium.autoAdd,
      isActive: this.modelPremium.isActive,
      applyAgentCommission: this.modelPremium.applyAgentComm
    });
  }

  setPolicyPremiumModelValues() {
    const policyPremiumForm = this.policyPremiumEntryForm.value;
    this.modelPremium.classId = this.classId;
    this.modelPremium.coverId = this.model.id;
    this.modelPremium.policyType = policyPremiumForm.subLOB;
    this.modelPremium.rateFraction = policyPremiumForm.rateFraction;
    this.modelPremium.minPremium = policyPremiumForm.minPremium;
    this.modelPremium.paremiumRate = policyPremiumForm.premiumRate ? parseInt(policyPremiumForm.premiumRate) : 0;
    this.modelPremium.premiumAmount = policyPremiumForm.premiumAmount;
    this.modelPremium.deductible = policyPremiumForm.deductible ? parseFloat(policyPremiumForm.deductible) : 0;
    this.modelPremium.maxDedAmount = policyPremiumForm.maxDeductibleAmount;
    this.modelPremium.minDedAmount = policyPremiumForm.minDeductibleAmount;
    this.modelPremium.fromSumInsured = policyPremiumForm.sumInsuredFrom;
    this.modelPremium.toSumInsured = policyPremiumForm.sumInsuredTo;
    this.modelPremium.vehicleType = policyPremiumForm.vehicleType;
    this.modelPremium.vehicleModel = policyPremiumForm.vehicleModel;
    this.modelPremium.vehicleBody = policyPremiumForm.vehicleBody;
    this.modelPremium.repairCondition = policyPremiumForm.repairCondition;
    this.modelPremium.fromDriverAge = policyPremiumForm.driverAgeFrom;
    this.modelPremium.toDriverAge = policyPremiumForm.driverAgeTo;
    this.modelPremium.fromVehicleAge = policyPremiumForm.vehicleAgeFrom;
    this.modelPremium.toVehicleAge = policyPremiumForm.vehicleAgeTo;
    this.modelPremium.category = policyPremiumForm.category;
    this.modelPremium.branch = policyPremiumForm.branch;
    this.modelPremium.applyPremium = policyPremiumForm.applyPremium ? 1 : 0;
    this.modelPremium.autoAdd = policyPremiumForm.autoAdd ? 1 : 0;
    this.modelPremium.isActive = policyPremiumForm.isActive ? 1 : 0;
    this.modelPremium.applyAgentComm = policyPremiumForm.applyAgentCommission ? 1 : 0;

    if (this.modelPremium.id != undefined) {
      let bstExcludedParties: BstCoverParties[] = [];
      this.excludedInsuranceCompanies.forEach(company => {
        let bstCoverParty = new BstCoverParties();
        bstCoverParty.coverPremiumId = this.modelPremium.id;
        bstCoverParty.partyId = company.value;
        bstCoverParty.creationUser = this.user.userName;
        bstCoverParty.creationDate = new Date();

        bstExcludedParties.push(bstCoverParty);
      });
      this.modelPremium.bstCoverParties = bstExcludedParties;
    }
  }

  saveUpdateModelPremium() {
    this.setPolicyPremiumModelValues();
    if (this.modelPremium.id > 0) {
      this.modelPremium.modificationUser = this.user.userName;
      this.modelPremium.modificationDate = new Date();

      this.coverPremiumsService.Put(this.modelPremium).subscribe(
        data => {
          console.log(data);
          this.getPolicyPremiums(this.model.id);
          this.resetFormPremium();
          this.cs.addMessage(data.status == 1 ? 'success' : 'error', data.status == 1 ? 'Success ' : 'Error', data.status == 1 ? 'Updated successfully' : 'Error in updating "Cover Premium"');
        },
        err => {
          this.cs.addMessage('error', 'Error', 'Error in updating "Cover Premium"');
        });
    }
    else {
      this.modelPremium.creationUser = this.user.userName;
      this.modelPremium.creationDate = new Date();
      this.coverPremiumsService.Post(this.modelPremium).subscribe(
        data => {
          this.modelPremium.id = data.data.id;
          this.getPolicyPremiums(this.model.id);
          console.log(data);
          this.cs.addMessage(data.status == 1 ? 'success' : 'error', data.status == 1 ? 'Success ' : 'Error', data.status == 1 ? 'Saved successfully' : 'Error in saving "Cover Premium"');
        },
        err => {
          this.cs.addMessage('error', 'Error', 'Error in saving "Cover Premium"');
          console.log(err);
        }
      );
    }
  }

  DeleteModelPremium() {
    if (this.selectedRowsPremium === undefined || this.selectedRowsPremium.length == 0) {
      this.cs.pushMessage("warn", "Warn Message", "No rows selected.");
    }
    else {
      this.cm.confirm({
        message: 'Are you sure you want to delete these records?',
        header: 'Delete Confirmation',
        icon: 'fa fa-trash',
        accept: () => {
          this.loading = true;
          this.cs.showOrHideSpinner(this.loading);
          console.log(this.selectedRowsPremium);
          this.coverPremiumsService.DeleteRange(this.selectedRowsPremium)
            .subscribe(
              data => {
                this.selectedRowsPremium = [];
                this.getPolicyPremiums(this.model.id);
                this.loading = false;
                this.cs.showOrHideSpinner(this.loading);
                this.cs.pushMessage("success", "Success", "Record Deleted Successfully");
              },
              err => {
                console.log(err);
                this.loading = false;
                this.cs.showOrHideSpinner(this.loading);
                this.cs.pushError(err);
              });
        },
        reject: () => {
          this.selectedRowsPremium = [];
          this.loading = false;
          this.cs.showOrHideSpinner(this.loading);
        }
      });
    }
  }
}
==================================================================================


